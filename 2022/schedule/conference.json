{"schedule": [{"room": "355ABC, 355DEF, 151DEFG", "rooms": ["355ABC", "355DEF", "151DEFG"], "start": "2022-04-30T08:00:00-07:00", "end": "2022-04-30T08:55:00-07:00", "duration": 55, "kind": "plenary", "section": "talks", "conf_key": 175, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Lightning Talks"}, {"room": "255ABC, 255DEF", "rooms": ["255ABC", "255DEF"], "start": "2022-04-30T08:00:00-07:00", "end": "2022-04-30T08:55:00-07:00", "duration": 55, "kind": "break", "section": "talks", "conf_key": 174, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Breakfast"}, {"room": "355ABC, 355DEF", "rooms": ["355ABC", "355DEF"], "start": "2022-05-01T08:00:00-07:00", "end": "2022-05-01T08:55:00-07:00", "duration": 55, "kind": "plenary", "section": "talks", "conf_key": 227, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Lightning Talks"}, {"room": "255ABC, 255DEF", "rooms": ["255ABC", "255DEF"], "start": "2022-05-01T08:00:00-07:00", "end": "2022-05-01T08:55:00-07:00", "duration": 55, "kind": "break", "section": "talks", "conf_key": 226, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Breakfast"}, {"room": "255ABC, 255DEF, 355ABC, 355DEF, 151DEFG", "rooms": ["255ABC", "255DEF", "355ABC", "355DEF", "151DEFG"], "start": "2022-04-29T08:00:00-07:00", "end": "2022-04-29T08:55:00-07:00", "duration": 55, "kind": "break", "section": "talks", "conf_key": 123, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Breakfast"}, {"room": "251C", "rooms": ["251C"], "start": "2022-04-28T09:00:00-07:00", "end": "2022-04-28T10:00:00-07:00", "duration": 60, "kind": "sponsor-workshop", "section": "sponsor-workshops", "conf_key": 349, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "ElasticSearch and Python, a match made in heaven (Sponsor: Sentry)", "authors": ["Anton Pirker", "Ahmed Etefy"], "description": "We will show you how you can use Python to effortlessly ingest a lot of data into ElasticSearch and leverage the power of ElasticSearch and Kibana to visualize your data. You will no longer have a data lake where your data goes to die, but rather be able to make insightful realizations, and discoveries on. \r\nAfter this workshop you will be able to send all your data to ElasticSearch and create beautiful dashboards in Kibana to discover the hidden treasures in your data.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/168/", "cancelled": false}, {"room": "251F", "rooms": ["251F"], "start": "2022-04-28T09:00:00-07:00", "end": "2022-04-28T10:00:00-07:00", "duration": 60, "kind": "sponsor-workshop", "section": "sponsor-workshops", "conf_key": 347, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Database for AI: the future of handing off data to compute (Sponsor: Activeloop)", "authors": ["Davit Buniatyan"], "description": "Managing unstructured data like videos, images, and text for deep learning purposes is becoming increasingly more complex. Nonetheless, current solutions for storing the data we create (databases, data lakes, and data warehouses) are unsuitable for storing computer vision data. There are numerous file formats, compression techniques, and multiple locations to attend to. As the dataset size grows, it becomes highly cumbersome and time-consuming to manage, often leaving the data siloed. A database for AI, designed specifically for AI, solves this problem.\r\n\r\nParticipants will learn about the Database for AI, a data-centric framework utilizing a format designed specifically for streaming data for deep learning. Effectively, computer vision data is stored on the cloud and streamed in a format directly used in training deep learning models. This enables (1) creating, storing, and collaborating on AI datasets of any size; (2) rapidly transforming and streaming data while training models at scale and (3) instant exploration and visualization of datasets for AI regardless of their size and storage location.\r\n\r\nTo illustrate the benefits of the framework, we demonstrate one such use case. The novel approach is superior to mechanisms provided by AWS SageMaker (like File mode, and Fast File mode). Streaming data using our approach was found to be virtually equal to reading off of a disk. The case study was conducted by training ResNet-50 on ImageNet data for a few epochs. This cloud-native is 2x faster than the traditional methods (storing data in a file system), and results in near-full utilization of v100 GPUs at an average rate of 95%. \r\n\r\nEffectively, we demonstrate that by adopting the AI-native database, data scientists can get started with their work without the need to download the data first to start training, and hand off data to compute more efficiently.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/126/", "cancelled": false}, {"room": "250C", "rooms": ["250C"], "start": "2022-04-27T09:00:00-07:00", "end": "2022-04-27T12:30:00-07:00", "duration": 210, "kind": "tutorial", "section": "tutorials", "conf_key": 246, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Distributed Python with Ray: Hands-on with the Ray Core APIs", "authors": ["Jules S. Damji"], "description": "This is an introductory and hands-on guided tutorial of Ray Core. Ray provides powerful yet easy-to-use design patterns for implementing distributed systems in Python. This tutorial includes a brief talk to provide an overview of concepts, why one might use Ray for distributing Python and Machine Learning workloads, and a brief discussion on Ray\u2019s Ecosystem.\r\n\r\nPrimarily, the tutorial will focus on Ray Core APIs to write remote functions, actors, and understand Ray\u2019s basic design patterns for writing distributed Python applications.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/164/", "cancelled": false}, {"room": "250DE", "rooms": ["250DE"], "start": "2022-04-27T09:00:00-07:00", "end": "2022-04-27T12:30:00-07:00", "duration": 210, "kind": "tutorial", "section": "tutorials", "conf_key": 247, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Slot"}, {"room": "255ABC, 255DEF, 355ABC, 355DEF", "rooms": ["255ABC", "255DEF", "355ABC", "355DEF"], "start": "2022-05-01T09:00:00-07:00", "end": "2022-05-01T09:20:00-07:00", "duration": 20, "kind": "plenary", "section": "talks", "conf_key": 366, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Diversity & Inclusion Workgroup Panel<br>\r\n<small>Georgi Ker, Lorena Mesa, Anthony Shaw, Reuven Lerner</small>"}, {"room": "250AB", "rooms": ["250AB"], "start": "2022-04-28T09:00:00-07:00", "end": "2022-04-28T12:30:00-07:00", "duration": 210, "kind": "tutorial", "section": "tutorials", "conf_key": 256, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Learning from errors: understanding and debugging Python errors", "authors": ["DOROTA JARECKA"], "description": "Python is a very user-friendly language that is easy to learn. New users can quickly write relatively complicated code that uses various libraries. Writing code can be an exciting experience, especially if it works and we can quickly see the result of our work. However, programming is not only about writing code that works, but also about debugging issues when the code doesn\u2019t work. Unfortunately, many new users are either discouraged when getting errors or use inefficient ways of debugging these errors, e.g. using only print statements. The aim of this tutorial is to change it and convince people that debugging tools are very useful even for beginner and intermediate programmers. I will also discuss how to handle exceptions when writing your own software.\r\n\r\nDuring this tutorial participants will learn:\r\n- about various types of errors, \r\n- how to understand Python traceback output,\r\n- how to use Python debugger,\r\n- how to write software that returns meaningful errors,\r\n- how to report errors to open source projects.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/93/", "cancelled": false}, {"room": "255ABC, 255DEF, 355ABC, 355DEF, 151DEFG", "rooms": ["255ABC", "255DEF", "355ABC", "355DEF", "151DEFG"], "start": "2022-04-29T09:00:00-07:00", "end": "2022-04-29T09:25:00-07:00", "duration": 25, "kind": "plenary", "section": "talks", "conf_key": 124, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Welcome<br><small>Emily Morehouse</small>"}, {"room": "250DE", "rooms": ["250DE"], "start": "2022-04-28T09:00:00-07:00", "end": "2022-04-28T12:30:00-07:00", "duration": 210, "kind": "tutorial", "section": "tutorials", "conf_key": 258, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "A Pythonista\u2019s Introductory Guide to WebAssembly", "authors": ["Ariel Ortiz"], "description": "Wasm is a binary code format specification first released in 2017. This technology can be implemented in web browsers or standalone applications in a secure, open, portable, and efficient fashion. More precisely, Wasm is an intermediate language for a stack-based virtual machine that uses a just-in-time (JIT) compiler to produce native machine code. Although Wasm was primarily designed as a compilation target for languages such as C/C++ or Rust, it can be integrated with Python in interesting ways. And that\u2019s what we\u2019ll be focusing on during this tutorial. Some experience with JavaScript and web development might come in handy but is not strictly required. At the end, we\u2019ll show how to develop a tiny compiler that has Wasm as it\u2019s compilation target.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/53/", "cancelled": false}, {"room": "251D", "rooms": ["251D"], "start": "2022-04-28T09:00:00-07:00", "end": "2022-04-28T10:00:00-07:00", "duration": 60, "kind": "sponsor-workshop", "section": "sponsor-workshops", "conf_key": 348, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Deep Dive on the AWS SDK for Python (Boto3) (Sponsor: AWS)", "authors": ["Jordan Guymon"], "description": "Have you ever wondered how Boto3 scales to support hundreds of AWS services? Or perhaps you've pondered where the source code for the API clients is? If so, then this talk is for you!\r\n\r\nThis talk will focus on a deep-dive into the AWS SDK for Python (Boto3) codebase explaining the approaches taken to develop the SDK, the inner workings of the SDK, and some advanced features of the SDK for power users.  After the talk one should come away with a better understanding of how the AWS SDK for Python is developed, how the project scales to support hundreds of AWS services, as well as a basic understanding of Python metaprogramming and model-driven development.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/167/", "cancelled": false}, {"room": "251E", "rooms": ["251E"], "start": "2022-04-28T09:00:00-07:00", "end": "2022-04-28T10:00:00-07:00", "duration": 60, "kind": "sponsor-workshop", "section": "sponsor-workshops", "conf_key": 346, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Data Profiler: A ML Open Source Solution to Detect Sensitive Data (Sponsor: Capital One)", "authors": ["Jeremy Goodsitt, PhD, Lead Machine Learning Engineer at Capital One", "Kenny Bean"], "description": "Data Profiler is an open source solution from Capital One that uses machine learning to help companies monitor big data and detect private customer information so that it can be protected. Data Profiler provides a pre-trained deep learning model to efficiently identify sensitive information and generate statistics with an infrastructure to build data labelers. Data Profiler can accept a wide range of data formats including csv, avro, parquet, json, text, and pandas DataFrames. Whether the data is structured, semi-structured or unstructured, the library is able to identify the schema, statistics, entities from the data. Versatility of the data labeler allows models to be modified as needed and it\u2019s possible to run multiple models on the same dataset with just a few lines of code. Check out Data Profiler on GitHub here. \r\n\r\nWe invite data scientists, machine learning engineers, software engineers, from beginner to expert level, to learn how to extract data properties in an efficient way with DataProfiler.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/124/", "cancelled": false}, {"room": "250F", "rooms": ["250F"], "start": "2022-04-27T09:00:00-07:00", "end": "2022-04-27T12:30:00-07:00", "duration": 210, "kind": "tutorial", "section": "tutorials", "conf_key": 248, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Getting started with Object-Oriented Programming through Signal Processing", "authors": ["Francesco Bruni"], "description": "In this tutorial OOP foundations will be explored fitting signals and waves into objects.\r\n\r\nWe will follow a top-down methodology, by modelling signals from scratch, creating fatty objects, and then tweaking their representation introducing inheritance and delegation. We will talk about Python magic methods to implement processing operations. We will eventually see how to implement the Iterator Design Pattern.\r\n\r\nTrough the session, we will keep a special eye on code explicitness and simplicity, highlighting pros and cons of every implementation.\r\n\r\nA laptop with Python installed is the sole requirement. \r\nNeverthless, it could be handful having a Jupyter notebook instance running to visualize and listen to signals easily. In this case only *numpy* and *matplotlib* should be already installed.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/28/", "cancelled": false}, {"room": "251AB", "rooms": ["251AB"], "start": "2022-04-27T09:00:00-07:00", "end": "2022-04-27T12:30:00-07:00", "duration": 210, "kind": "tutorial", "section": "tutorials", "conf_key": 249, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "All about decorators", "authors": ["Reuven M. Lerner"], "description": "Decorators are one of Python's most powerful features. But for many developers, they remain somewhat mysterious and intimidating. In this tutorial, you'll learn what decorators are, how they work, how to write them, and when you should use them. Along the way, you'll write decorators that demonstrate their power, as well as some typical use cases \u2014\u00a0including for caching, filtering inputs, filtering outputs, timing, logging, and security. Along with the numerous hands-on exercises, there will be ample opportunities for questions and interactions. The Jupyter notebook that I'll use for teaching will be shared in real time with participants, and will also be available after the tutorial is over.\r\n\r\nIf you've always found decorators intimidating, or just wanted to know what they are, then this tutorial will answer your questions, as well as give you the confidence you need to use them in your own code.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/64/", "cancelled": false}, {"room": "255ABC, 255DEF, 355ABC, 355DEF, 151DEFG", "rooms": ["255ABC", "255DEF", "355ABC", "355DEF", "151DEFG"], "start": "2022-04-30T09:00:00-07:00", "end": "2022-04-30T09:40:00-07:00", "duration": 40, "kind": "plenary", "section": "talks", "conf_key": 176, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Keynote - <a href=\"https://us.pycon.org/2022/about/keynote-speakers/#sara\">Sara Issaoun</a>"}, {"room": "251AB", "rooms": ["251AB"], "start": "2022-04-28T09:00:00-07:00", "end": "2022-04-28T12:30:00-07:00", "duration": 210, "kind": "tutorial", "section": "tutorials", "conf_key": 260, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "JupyterLab for Everybody - Harness the Full Power of Interactive Python Development", "authors": ["Mike M\u00fcller"], "description": "JupyterLab is a widely use tool in the scientific and data science community.\r\nIt allows for very fast interactive work.\r\nIt is way more powerful than the standard Python REPL or other terminal-based,\r\nimproved REPL.\r\n\r\nThis tutorial introduces basic and more advanced JupyterLab features.\r\nIn addition it highlights potential problems that result from the principles\r\nJupyterLab is based upon.\r\nBeing aware of these problems is important to avoid them.\r\nExamples of workflows show how JupyterLab can be used by everybody for various\r\ntasks.\r\nYou will learn when to use or **not** to use JupyterLab.\r\nIf you haven't use JupyterLab before, you will learn about a new tool that can\r\nbe a good addition to your programming toolbox.\r\nIf you have already been using JupyterLab, but found it not ideal for your\r\npurposes, you will learn how you can avoid potential pitfalls, to apply\r\nappropriate workflows, and when to switch to or combine JupyterLab with a\r\ndifferent tool.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/66/", "cancelled": false}, {"room": "250F", "rooms": ["250F"], "start": "2022-04-28T09:00:00-07:00", "end": "2022-04-28T12:30:00-07:00", "duration": 210, "kind": "tutorial", "section": "tutorials", "conf_key": 259, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Introduction to Property-Based Testing", "authors": ["Zac Hatfield-Dodds"], "description": "# Description\r\nHas testing got you down? Ever spent a day writing tests, only to discover that you missed a bug because of some edge case you didn\u2019t know about? Does it ever feel like writing tests is just a formality - that you already know your test cases will pass?\r\n\r\n**Property-based testing might be just what you need!**\r\n\r\nAfter this introduction to property-based testing, you\u2019ll be comfortable with Hypothesis, a friendly but powerful property-based testing library. You\u2019ll also known how to check and enforce robust properties in your code, and will have hands-on experience finding real bugs.\r\n\r\nWhere traditional example-based tests require you to write out each exact scenario to check - for example, `assert divide(3, 4) == 0.75` - property-based tests are *generalised* and *assisted*. You describe what kinds of inputs are allowed, write a test that should pass for any of them, and Hypothesis does the rest!\r\n\r\n```python\r\nfrom hypothesis import given, strategies as st\r\n\r\n@given(a=st.integers(), b=st.integers())\r\ndef test_divide(a, b):\r\n   result = a / b\r\n   assert a == b * result\r\n```\r\n\r\nThere\u2019s the obvious `ZeroDivisionError`, fixable with `b = st.integers().filter(lambda b: b != 0)`, but there\u2019s another bug lurking. Can you see it? Hypothesis can!\r\n\r\n\r\n# Audience\r\nThis tutorial is for anybody who regularly writes tests in Python, and would like an easier and more effective way to do so. We assume that you are comfortable with traditional unit tests - reading, running, and writing; as well as familar with ideas like assertions. Most attendees will have heard \"given, when, then\" and \"arrange, act, assert\". You may or may not have heard of pre- and post-conditions - we will explain what \"property-based\" means without reference to Haskell or anything algebraic.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/177/", "cancelled": false}, {"room": "250AB", "rooms": ["250AB"], "start": "2022-04-27T09:00:00-07:00", "end": "2022-04-27T12:30:00-07:00", "duration": 210, "kind": "tutorial", "section": "tutorials", "conf_key": 245, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Introduction to Natural Language Processing", "authors": ["Leah Simpson", "Ray McLendon"], "description": "With Data Scientist consistently named one of the trendiest jobs of the 21st Century, it\u2019s no surprise that many are flocking to learn skills like Python, mathematics, and machine learning. In this tutorial we\u2019ll introduce attendees to an important subfield of data science: natural language processing (NLP).\r\n \r\nUsing popular data science libraries such as pandas, spaCy, and scikit-learn, we\u2019ll cover common NLP terminology used in the industry as well as text preprocessing techniques. In addition, we\u2019ll identify real world objects like people and businesses using named entity recognition and summarize data using term frequency. We\u2019ll also learn to analyze the structure of our text data using dependency parsing and part-of-speech tagging. We'll end with an introduction to text similarity and determine key topics using topic modeling.\r\n \r\nAttendees will gain hands-on experience by analyzing 500 Amazon Home and Kitchen product reviews.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/38/", "cancelled": false}, {"room": "250C", "rooms": ["250C"], "start": "2022-04-28T09:00:00-07:00", "end": "2022-04-28T12:30:00-07:00", "duration": 210, "kind": "tutorial", "section": "tutorials", "conf_key": 257, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Network Analysis Made Simple", "authors": ["Eric Ma"], "description": "Have you ever wondered about how data scientists at Facebook and LinkedIn make friend recommendations? Or how epidemiologists track down patient zero in an outbreak? If so, then this tutorial is for you. In this tutorial, we will use a variety of datasets to help you understand the fundamentals of network thinking, with a particular focus on constructing, summarizing, visualizing, and using complex networks to solve problems.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/47/", "cancelled": false}, {"room": "255ABC, 255DEF, 355ABC, 355DEF", "rooms": ["255ABC", "255DEF", "355ABC", "355DEF"], "start": "2022-05-01T09:20:00-07:00", "end": "2022-05-01T10:00:00-07:00", "duration": 40, "kind": "plenary", "section": "talks", "conf_key": 228, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Keynote - <a href=\"https://us.pycon.org/2022/about/keynote-speakers/#steering-council\">Steering Council Panel</a>"}, {"room": "255ABC, 255DEF, 355ABC, 355DEF, 151DEFG", "rooms": ["255ABC", "255DEF", "355ABC", "355DEF", "151DEFG"], "start": "2022-04-29T09:30:00-07:00", "end": "2022-04-29T10:10:00-07:00", "duration": 40, "kind": "plenary", "section": "talks", "conf_key": 125, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Keynote - <a href=\"https://us.pycon.org/2022/about/keynote-speakers/#\u0142ukasz\">\u0141ukasz Langa</a>"}, {"room": "255ABC, 255DEF, 355ABC, 355DEF, 151DEFG", "rooms": ["255ABC", "255DEF", "355ABC", "355DEF", "151DEFG"], "start": "2022-04-30T09:45:00-07:00", "end": "2022-04-30T10:20:00-07:00", "duration": 35, "kind": "plenary", "section": "talks", "conf_key": 177, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Keynote - <a href=\"https://us.pycon.org/2022/about/keynote-speakers/#peter\">Peter Wang</a>"}, {"room": "251E, 251F, 251D, 251C", "rooms": ["251E", "251F", "251D", "251C"], "start": "2022-04-28T10:00:00-07:00", "end": "2022-04-28T11:30:00-07:00", "duration": 90, "kind": "blank", "section": "sponsor-workshops", "conf_key": 350, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "&nbsp;"}, {"room": "255ABC, 255DEF, 355ABC, 355DEF", "rooms": ["255ABC", "255DEF", "355ABC", "355DEF"], "start": "2022-05-01T10:00:00-07:00", "end": "2022-05-01T13:00:00-07:00", "duration": 180, "kind": "event", "section": "talks", "conf_key": 229, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Job Fair, Posters, Lunch"}, {"room": "255ABC, 255DEF, 355ABC, 355DEF, 151DEFG", "rooms": ["255ABC", "255DEF", "355ABC", "355DEF", "151DEFG"], "start": "2022-04-29T10:15:00-07:00", "end": "2022-04-29T10:45:00-07:00", "duration": 30, "kind": "break", "section": "talks", "conf_key": 126, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Break"}, {"room": "255ABC, 255DEF, 355ABC, 355DEF, 151DEFG", "rooms": ["255ABC", "255DEF", "355ABC", "355DEF", "151DEFG"], "start": "2022-04-30T10:20:00-07:00", "end": "2022-04-30T10:45:00-07:00", "duration": 25, "kind": "break", "section": "talks", "conf_key": 178, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Break"}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-04-29T10:45:00-07:00", "end": "2022-04-29T11:15:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 127, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Python Oddities Explained", "authors": ["Trey Hunner"], "description": "A number of Python features often seem counter-intuitive at first glance, especially when moving from another programming language to Python. Often what at first seems like a bug, will later reveal itself to be a misunderstood feature.\r\n\r\nDuring this talk we'll look at a number of Python's unique features and quirks and attempt to re-shape our mental models of Python to better match reality. By the end of this talk you'll have a deeper understanding of Python's rules behind objects, scope, and variables.\r\n\r\nWarning: this talk will include many Python head-scratchers so show up prepared to think on your feet!", "conf_url": "http://us.pycon.org/2022/schedule/presentation/31/", "cancelled": false}, {"room": "151DEFG", "rooms": ["151DEFG"], "start": "2022-04-30T10:45:00-07:00", "end": "2022-04-30T11:15:00-07:00", "duration": 30, "kind": "charla", "section": "talks", "conf_key": 183, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Reduciendo prejuicio en la inteligencia artificial: introducci\u00f3n a Fairlearn", "authors": ["Laura Gutierrez Funderburk"], "description": "En esta charla, el ponente proveer\u00e1:\r\n\r\n1. Introducci\u00f3n a un problema de aprendizaje autom\u00e1tico en el \u00e1mbito de salud: estudiaremos un problema con datos sobre pacientes, y un programa que busca recomendar a pacientes de mayor riesgo basado en el n\u00famero de visitas de emergencia y no emergencia. \r\n\r\n2. Ejemplos de c\u00f3mo evaluar los datos para identificar prejuicios utilizando gr\u00e1ficos y los paquetes `pandas` y `matplolib`. Entrenamiento del modelo con `scikit-learn` y evaluaci\u00f3n de eficacia de resultados. \r\n\r\n3. Una introducci\u00f3n a [Fairlearn](https://fairlearn.org/). Basado en el ejemplo anterior, vamos a ver c\u00f3mo podemos utilizar `Fairlearn` para mejorar c\u00f3mo determina el algoritmo a qu\u00e9 pacientes recomendar via el uso de dos subm\u00f3ludos: `MetricFrame` y `ThresholdOptimizer`. Veremos c\u00f3mo podemos mejorar la calidad de las predicciones. \r\n\r\n4. C\u00f3mo aprender m\u00e1s sobre `Fairlearn`, la comunidad y oportunidades para contribuir.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/7/", "cancelled": false}, {"room": "151DEFG", "rooms": ["151DEFG"], "start": "2022-04-29T10:45:00-07:00", "end": "2022-04-29T11:15:00-07:00", "duration": 30, "kind": "charla", "section": "talks", "conf_key": 131, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Uniendo a las comunidades hispanohablantes de Python", "authors": ["Cristi\u00e1n Maureira-Fredes", "Denny Perez"], "description": "Python en Espa\u00f1ol tiene como objetivo ser el lugar de encuentro central de todas las comunidades de Python hispanohablantes, ayudando a superar la barrera de lenguaje que usualmente es el primer problema con el que muchas personas se encuentran a la hora de buscar documentaci\u00f3n, experiencias, o consejos. El equipo de coordinaci\u00f3n est\u00e1 formado por personas de distintos pa\u00edses y comunidades, y busca poder tener representaci\u00f3n de cada pa\u00eds hispanohablante, y as\u00ed entender las distintas realidades a la que la comunidad se enfrenta.\r\nUno de los objetivos centrales, es poder compartir la informaci\u00f3n que la comunidad en general pueda aprender de la experiencia de todas las comunidades colectivamente, para que cada nuevo cap\u00edtulo se vaya formando sin tantas dificultades.\r\nFinalmente, la centralizaci\u00f3n de recursos y eventos, facilita el acceso para toda la comunidad.\r\n\r\nLuego de esta charla, aprender\u00e1s de los esfuerzos, proyectos e ideas detr\u00e1s de esta iniciativa, y sobre todo como poder sumarte.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/174/", "cancelled": false}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-04-30T10:45:00-07:00", "end": "2022-04-30T11:15:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 182, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Actionable insights vs ranking: How to use and how NOT to use code quality metrics?", "authors": ["Reka", "Ben"], "description": "In this talk, we want to make two major points:\r\n\r\n* Metrics can facilitate better conversation about code quality. They help you focus more on technical problems and improvements instead of personal preferences and organizational issues.\r\n* Metrics can be misused very easily. Knowing their limitations is crucial.\r\n\r\n## Metrics\r\n\r\nFor each metric, we'll discuss:\r\n\r\n* code examples in Python\r\n* how to calculate\r\n* interpretation (incl. some comparison across open source Python projects)\r\n* actions\r\n* limitations\r\n\r\n### Method Length\r\n\r\nThe simple.\r\n\r\n* You can calculate it without specific tools.\r\n* First step: Extract functions.\r\n* It shows well some general limitations of code quality metrics.\r\n\r\n### Cyclomatic Complexity\r\n\r\nThe old.\r\n\r\n* Show the formula, but don't explain it in detail. :-)\r\n* Extract functions. Remove redundant if conditions.\r\n* It doesn't account for nested coding constructs. It ignores some modern language patterns. \r\n \r\n### Cognitive Complexity\r\n\r\nThe human.\r\n\r\n* Calculation and interpretation: see https://www.sonarsource.com/docs/CognitiveComplexity.pdf\r\n* Actions: Extract functions. Use shorthand structures. More Pythonic code is also more readable.\r\n* Limitations: It ignores both the length of a linear block and the complexity of the expressions used in it.\r\n\r\n### Working Memory\r\n\r\nAnother aspect of human understanding.\r\n\r\n* Calculation: see https://sourcery.ai/blog/working-memory/\r\n* Interpretation: The 7 +/- 2 rule of the human working memory.\r\n* Actions: Extract functions, some more specific refactorings this metric rewards.\r\n* Limitations: It ignores the structure.\r\n\r\n## Limitations And Pitfalls\r\n\r\n### General\r\n\r\n* They can be gamed.\r\n* They easily encourage one-sided thinking and behaviour.\r\n\r\n### Specific For Code Quality Metrics\r\n\r\n* Great as warning signs, not good as \"proof of excellence\".\r\n\r\n### Compound Metrics\r\n\r\nGiving a more versatile picture than a single metric.\r\n\r\n## What Metrics Don't Capture\r\n\r\n* naming, consistent terminology, ubiquitous language (DDD)\r\n* project structure\r\n* correctness", "conf_url": "http://us.pycon.org/2022/schedule/presentation/117/", "cancelled": false}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-04-29T10:45:00-07:00", "end": "2022-04-29T11:15:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 128, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Slot"}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-04-30T10:45:00-07:00", "end": "2022-04-30T11:15:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 181, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Using Python for\u00a0Disease\u00a0Variant Analysis", "authors": ["Atia Binte Amin"], "description": "Variant,\u00a0a term\u00a0once only known to the researchers of biological\u00a0sciences,\u00a0is now\u00a0quite\u00a0familiar to the\u00a0general\u00a0people.\u00a0Rising of the new variants\u00a0of SARS-Cov2 virus\u00a0with novel mutations have become a topic of concern\u00a0during this COVID-19 pandemic.\u00a0How do the researchers\u00a0identify\u00a0these variants from the analysis of genomics data? How could Python be used in this analysis?\u00a0This talk\u00a0will\u00a0address\u00a0these questions.\u00a0\r\n\r\nMutations\u00a0in any organism\u00a0are usually\u00a0identified\u00a0after\u00a0performing a Next Generation Sequence analysis\u00a0experiment\u00a0named variant calling. Variant calling generates the output in a specialized file format called\u00a0Variant Call Format\u00a0(VCF)\u00a0file.\u00a0VCF file carries\u00a0the meta data and\u00a0the\u00a0information of thousands of\u00a0mutations\u00a0and\u00a0is\u00a0generally\u00a0large in size.\u00a0Thus, it is challenging to extract information and\u00a0identify\u00a0mutations\u00a0from this file, especially when there are hundreds of samples.\u00a0The\u00a0Python\u00a0package scikit-allel\u00a0provides\u00a0utilities for exploring\u00a0this\u00a0large-scale\u00a0genetic variation data in VCF file\u00a0and\u00a0helps\u00a0to\u00a0identify\u00a0important mutations from the downstream analysis. This package depends on\u00a0scipy,\u00a0matplotlib,\u00a0seaborn,\u00a0pandas,\u00a0scikit-learn,\u00a0h5py\u00a0and\u00a0zarr.\u00a0After\u00a0identifying\u00a0the mutations, the next step is the visualization of\u00a0the mutations in a meaningful way. This task\u00a0might be simpler for a small size virus like SARS-Cov2, but complicated for eukaryotic organisms with multiple chromosomes like\u00a0mouse or human. Another python package\u00a0QMplot\u00a0is handy and useful for the visualization of thousands of mutations\u00a0in\u00a0each\u00a0chromosome,\u00a0making the interpretation of the extracted mutations easier for the biologists. This package uses\u00a0numpy,\u00a0scipy,\u00a0pandas\u00a0and\u00a0matplotlib.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/113/", "cancelled": false}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-04-30T10:45:00-07:00", "end": "2022-04-30T11:15:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 180, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Securing Code with the Python Type System", "authors": ["Graham Bleaney", "Pradeep Kumar Srinivasan"], "description": "Preventing security vulnerabilities often brings to mind heavyweight security tools. But what if it doesn\u2019t have to be that way? What if you could use the concepts already built into Python to make your code incrementally more secure?\r\n\r\nIn this talk, we'll see how Python types allow you to improve your project's security incrementally. First, we\u2019ll show how simple type annotations by themselves can prevent security-impacting logic errors. Second, we'll see how you can prevent injection vulnerabilities such as SQL injection using a special type in your APIs ([PEP 675](https://www.python.org/dev/peps/pep-0675/)). Next, we demonstrate how to leverage runtime type validation to securely deal with user-controlled data (such as HTTP requests). Finally, we show how types naturally enable powerful typing-based tools like Pysa and CodeQL to perform static taint flow analysis and catch complex vulnerabilities that span multiple functions. No security tool is a panacea, however, so we\u2019ll also show you where typing and the tools that rely on it can fail.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/18/", "cancelled": false}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-04-29T10:45:00-07:00", "end": "2022-04-29T11:15:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 129, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Best Practices for Continuous Integration in Python", "authors": ["Moshe Zadka"], "description": "It is now accepted that having continuous integration is a best practice for almost all non-trivial projects. But configuring CI for Python correctly is still hard. The solution space is big, many common configurations work around the bugs and limitations that existed in past CI systems, and there are few explanations about how to do it well.\r\n\r\nA good CI configuration concentrates on giving timely and accurate feedback to the developer. Whether it is using GitHub Actions, GitLab CI/CD, Jenkins, or something else, there are ways to configure the system to be more accurate and faster.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/105/", "cancelled": false}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-04-29T10:45:00-07:00", "end": "2022-04-29T11:15:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 130, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Build-A-Database with Python", "authors": ["Sangarshanan"], "description": "This talk will help unlock the internal workings of a Database by breaking down the abstractions that make it. We will use Python as our weapon of choice to slowly discuss how you would \r\ngo about building the different components of a database.\r\n\r\n1) Talking to your Database: We start by building out an interface and a language that helps us communicate with our database. We will use Prompt toolkit to build a REPL & use a simple SQL-based language with basic regular expressions that can parse it to instruction to execute.\r\n\r\n2) Working with Data: Now that we can communicate with our database using instructions. we start the actual work in building out the Datastore, We initially store all the data in a simple in-memory dictionary and then move to persist this data to disk. We now read the data from the disk to memory every time we query the data and write back the data to the disk but this makes things very slow :(\r\nThis problem is our entry into the beautiful world of Indexes so by building a very basic Btree index to store references in memory to quickly access only what we require from the data on disk we can actually speed up our access times for basic row access queries from O(N) to O(1) where N is the number of rows in a table\r\n\r\n3) Future: We can now proudly demo our new and polished database that can store data, persist it, and can run queries that are quite fast thanks to our Btree Indexes. We also discuss how this Database can be improved in the future by supporting full ACID Transactions, allowing concurrency, and handling locks\r\n\r\nThe best way to understand something is to build it yourself :)", "conf_url": "http://us.pycon.org/2022/schedule/presentation/4/", "cancelled": false}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-04-30T10:45:00-07:00", "end": "2022-04-30T11:15:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 179, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Employing NumPy's NPY Format for Faster-Than-Parquet DataFrame Serialization", "authors": ["Christopher Ariza"], "description": "Over 14 years ago the first NumPy Enhancement Proposal (NEP) defined the NPY format (a binary encoding of array data and metadata) and the NPZ format (zipped bundles of NPY files). Those same formats, extended in a custom NPZ packaged with JSON metadata, can be used in Python to create a stable DataFrame storage format that can materially out-perform Parquet read / write times in a wide range of contexts. Unlike Parquet, all characteristics of a DataFrame can be encoded and all NumPy dtypes are supported. Implemented in StaticFrame, this format can take advantage of an immutable data model to memory-map full DataFrames from un-zipped directories of NPY. Given wide-spread use of Parquet files in data science workflows, a faster-than-Parquet file format can significantly reduce compute costs.\r\n\r\nI will begin this talk by introducing the challenge of serializing DataFrames, illustrating how nearly all stable encoding formats lack full support for all DataFrame characteristics. While the broadly-used Parquet format has been called a \"gold standard\" binary file format, its columnar representation will be shown to have limitations when used for encoding DataFrames.\r\n\r\nI will show how the NPY format, combined with JSON metadata, can be used to create a custom NPZ file with significant performance and compatibility advantages compared to Parquet. The details of this encoding scheme will be explained.\r\n\r\nI will close the talk by evaluating numerous read / write performance comparisons between Parquet (via Pandas) and NPZ (via StaticFrame), measured with a wide variety of DataFrame shapes and dtype compositions. I will share techniques used in implementing optimized Python routines for reading and writing NPY files, and demonstrate applications for memory-mapping complete DataFrames via the same NPY representation.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/29/", "cancelled": false}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-04-30T11:30:00-07:00", "end": "2022-04-30T12:00:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 186, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Programming Your Way up a Skyscraper - Python in the Built World", "authors": ["Tadeh Hakopian"], "description": "Learn how Architects leverage Python in building projects to enable more design possibilities than ever before. Python is one of the fastest growing scripting languages in the Building design and construction field increasingly being used by professional in the industry. This talk will lead you through how Architects design, plan, edit and execute scripts with Python using different editing tools. Learn about how designers tackle the challenge of putting a building together with the aid of code including; using Python script to edit geometry, create algorithmic design for buildings, sort data lists, write content to software and much more. With Python you can unleash the potential in your projects so come and see what\u2019s possible.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/108/", "cancelled": false}, {"room": "251C", "rooms": ["251C"], "start": "2022-04-28T11:30:00-07:00", "end": "2022-04-28T12:30:00-07:00", "duration": 60, "kind": "sponsor-workshop", "section": "sponsor-workshops", "conf_key": 354, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Quantum Computing for Classical Developers (Sponsor: IBM)", "authors": ["James Weaver"], "description": "The buzz about quantum computing has been rapidly increasing lately, and a growing number of developers have been looking into the subject. Concepts developers typically find challenging after cursory investigation of quantum computing include: superpositions of quantum bits (qubits), quantum gates, quantum entanglement (Einstein\u2019s \u201cspooky actions at a distance\u201d), and the relevance of Schr\u00f6dinger\u2019s famous cat.\r\n\r\nIn this presentation you'll receive a gentle introduction to quantum computing, including: A brief history of quantum computers, visualizing superpositions, composing quantum algorithms with quantum gates, and how to access real quantum computers.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/169/", "cancelled": false}, {"room": "251D", "rooms": ["251D"], "start": "2022-04-28T11:30:00-07:00", "end": "2022-04-28T12:30:00-07:00", "duration": 60, "kind": "sponsor-workshop", "section": "sponsor-workshops", "conf_key": 353, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Use Jupyter Notebook to Explore Google Cloud APIs (Sponsor: Google)", "authors": ["Charles Engelke", "Wesley Chun"], "description": "People use Jupyter Notebook for lots of different needs; it's a great tool for exploration, especially when learning new APIs as well as debugging APIs. A typical workflow to follow when working with new APIs:\r\n\r\n* Look at sample code\r\n* Sift through the documentation until it's understood\r\n* Write a program using the API\r\n* Figure out why it doesn't work, because it almost never does the first time\r\n\r\nThis process includes reviewing error messages, the documentation, updating the code, and trying again. Time may be wasted trying this more than once before admitting. That's when one realizes what should have been done first: get the API working from a Jupyter Notebook. That takes a lot less time, resulting in a much deeper understanding of how the API works, then copying and pasting working code into my program. Best of all, that worksheet can be saved for future reference.\r\n\r\nWe'll show a few examples of doing this and answer questions about this methodology.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/162/", "cancelled": false}, {"room": "251F", "rooms": ["251F"], "start": "2022-04-28T11:30:00-07:00", "end": "2022-04-28T12:30:00-07:00", "duration": 60, "kind": "sponsor-workshop", "section": "sponsor-workshops", "conf_key": 352, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Serverless in the era of data engineering and data science (Sponsor: Microsoft)", "authors": ["Varad Meru", "Shreya Batra", "Skyler Hartle"], "description": "Join the Azure Functions team as they share insights on how they are seeing data science, data engineering and serverless technologies come together to power the next generation of data tools. Learn more about the key investments Microsoft has planned for serverless Python workloads. The Azure Functions team invites the Python community to help shape the future of serverless technologies at Microsoft and would love to hear perspectives, opinions, and questions.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/125/", "cancelled": false}, {"room": "251E", "rooms": ["251E"], "start": "2022-04-28T11:30:00-07:00", "end": "2022-04-28T12:30:00-07:00", "duration": 60, "kind": "sponsor-workshop", "section": "sponsor-workshops", "conf_key": 351, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "How to setup your CI/CD to keep your code clean (Sponsor: Sonar)", "authors": ["Guillaume Dequenne", "Andrea Guarino"], "description": "In this workshop we will go through all the aspects and stages when integrating your project into Code Quality and Security Ecosystem. We will take a simple application as a starting point and create a CI pipeline triggering code quality monitoring for it using Sonar tools. We will do a full development cycle starting from coding in the IDE and opening a Pull Request and we will show you how you can control the quality at those stages. At the end of the workshop you will be ready to enable such integration for your own projects.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/123/", "cancelled": false}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-04-30T11:30:00-07:00", "end": "2022-04-30T12:00:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 187, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Testing Machine Learning Models", "authors": ["Carlos Kidman"], "description": "As ML/AI systems are becoming more prevalent, the need for setting **quality standards** and **testing practices** has become crucial. Testing these models goes beyond validation metrics like accuracy, precision, and recall.\r\n\r\nInstead, quality attributes like model **Behaviors, Usability, and Fairness** need to be tested and measured using exploratory and automated strategies.\r\n\r\nIn this talk, we'll cover some of the risks and biases that can happen throughout the MLOps pipeline, demonstrate a few techniques to test a model's behaviors and fairness, and apply them against some real-world scenarios and state-of-the-art models.\r\n\r\nBy the end, you will have new ideas and techniques that you can use to test your own ML/AI systems and approach testing these quality attributes from a user's perspective.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/46/", "cancelled": false}, {"room": "151DEFG", "rooms": ["151DEFG"], "start": "2022-04-30T11:30:00-07:00", "end": "2022-04-30T12:00:00-07:00", "duration": 30, "kind": "charla", "section": "talks", "conf_key": 188, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Software educativo: \u00bfque es? \u00bfcomo se hace?", "authors": ["D\u00e9bora Azevedo"], "description": "Si desea incursionar en la tecnolog\u00eda en la educaci\u00f3n, esta charla es para usted. Discutiremos las definiciones de tecnolog\u00eda y sus usos en la educaci\u00f3n como un medio para generar conocimiento y el desarrollo de software educativo y sus etapas. Para el desarrollo de esas herramientas es fundamental pensar en las concepciones pedag\u00f3gicas, que van a orientar todo el proceso de desarrollo. Posteriormente se presentar\u00e1n m\u00e1s detalles de cada etapa de desarrollo de este tipo de software, que son la concepci\u00f3n, elaboraci\u00f3n, finalizaci\u00f3n y viabilidad. En cada uno de ellos tambi\u00e9n se discutir\u00e1n procesos y patrones de buenas pr\u00e1cticas. Se presentar\u00e1 el software educativo que desarroll\u00e9 durante mi master, que tiene como objetivo ayudar a la alfabetizaci\u00f3n biling\u00fce (para lengua de signos brasile\u00f1a y portugu\u00e9s brasile\u00f1o escrito) de ni\u00f1os sordos siguiendo los patrones discutidos anteriormente. Terminaremos hablando de c\u00f3mo la innovaci\u00f3n debe estar presente en este tipo de herramientas, considerando la motivaci\u00f3n para desarrollar estas aplicaciones y los impactos que puede tener en la educaci\u00f3n. Finalmente, tambi\u00e9n discutiremos la accesibilidad y c\u00f3mo podr\u00eda haber problemas considerando nuestros propios prejuicios como desarrolladores de software, entre otras dificultades relacionadas con el proceso de desarrollo de software con fines educativos.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/128/", "cancelled": false}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-04-30T11:30:00-07:00", "end": "2022-04-30T12:00:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 184, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Hooking into the import system", "authors": ["Fred Phillips"], "description": "Import hooks and the import system in general is an under-used and under-documented resource within Python. This talk will introduce the audience to the import system, how it works, and how it can be adapted for their needs. We will build a simple import hook that can inspect what is being imported, and go on to demonstrate how we can use the import system to load Python modules from a database and how to reload files on disk immediately as they are changed.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/76/", "cancelled": false}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-04-30T11:30:00-07:00", "end": "2022-04-30T12:00:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 185, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Let's talk about JWT", "authors": ["Jessica Temporal"], "description": "JSON Web Tokens, or JWTs for short, are all over the web. They can be used to track bits of information about a user in a very compact way and can be used in APIs for authorization purposes. Join me and learn what JWTs are, what problems it solves, how you can use JWTs, and how to be safer when using JWTs on your applications.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/33/", "cancelled": false}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-04-29T11:30:00-07:00", "end": "2022-04-29T12:00:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 135, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "D&D and G- a daring tale of Dungeons and Dragons and also Graphs.", "authors": ["mohammad athar"], "description": "This talk will take the form of a story of adventurers who meet in tavern, and use graph algorithms to chase down a McGuffin. The goal is to develop an intuition-first understanding of common graph algorithms.\r\nTarget audience is primarily programmers who want to review, or better understand graph algorithms.\r\nI will show how to convert mazes, social networks, and maps in to graphs. I will also cover eight algorithms- BFS, DFS, Dijkstra's, Hierholzer's, articulation points, centrality, Kruskal's algorithm, and the Louvain method. I will also provide practical (as practical as D&D can get) applications for these algorithms.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/16/", "cancelled": false}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-04-29T11:30:00-07:00", "end": "2022-04-29T12:00:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 133, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Animating NFL play-by-play data using matplotlib's FuncAnimation()", "authors": ["Miranda Auhl"], "description": "Most of us have heard the saying, \"A picture is worth a thousand words,\" but a movie builds context and a story, especially when conveying data! Data animations allow us to share more information and are far more engaging than static plots. \r\n\r\nIn this talk, I will discuss the importance of animation in analysis and show how to create data animations using play-by-play RFID data from the 2018 NFL season.\r\n\r\nWithin data science, we often use graphical representations of data to convey our analysis engagingly and succinctly. However, a static image does not always do justice to our findings and sometimes can miss important concepts entirely. When we introduce animation, we can show how location, statistics, etc., can change over time. Using this NFL play-by-play data, I will show how to take a static data plot and transform it into an animation using the matplotlib module. \r\n\r\nBy the end of this talk, you will know what data animation is, how it works for matplotlib using FuncAnimation(), how to animate plots successfully using defined functions in conjunction with your iterative function, and how animation can improve your analysis.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/25/", "cancelled": false}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-04-29T11:30:00-07:00", "end": "2022-04-29T12:00:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 134, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Finding penguins with a snake: Linux features for a Python user", "authors": ["Mario Corchero"], "description": "Python has APIs that allow developers to use Linux features that many are often unaware of. If you are a modest Linux/Unix user and want to learn some features of the OS through the APIs that Python offers, this is the perfect talk with you. We will speak about processes, named pipes, fork and exec, inodes, and signals, among others, all whilst seeing how to play with these through the APIs that the Python standard library offers us.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/40/", "cancelled": false}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-04-29T11:30:00-07:00", "end": "2022-04-29T12:00:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 132, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "A Perfect Match: The history, design, implementation, and future of Python's structural pattern matching.", "authors": ["Brandt Bucher"], "description": "Python 3.10 was released on October 4th, bringing with it a major new feature: [\"structural pattern matching\"](https://docs.python.org/3/whatsnew/3.10.html#pep-634-structural-pattern-matching). As one of the designers of the feature and its principal implementer, my goal is to introduce you to Python's powerful, dynamic, object-oriented approach to this long-established functional programming construct, and to explore ways that you might use structural pattern matching in your own code. Along the way, we\u2019ll also dive into the history of the `match` statement, the design process behind it, how it actually works, and what we're already doing to improve it in Python 3.11 and beyond.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/116/", "cancelled": false}, {"room": "151DEFG", "rooms": ["151DEFG"], "start": "2022-04-29T11:30:00-07:00", "end": "2022-04-29T12:00:00-07:00", "duration": 30, "kind": "charla", "section": "talks", "conf_key": 136, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "AyudaPy.org: De proyecto de fin de semana a movimiento ciudadano clave durante la pandemia", "authors": ["Marcelo Elizeche Land\u00f3"], "description": "La charla trata sobre el proyecto AyudaPy.org que empez\u00f3 como un experimento/proyecto de fin de semana y se transform\u00f3 en una fuerza social en Paraguay que en muchos casos supli\u00f3 la respuesta del estado, de sus or\u00edgenes, futuro y sobre los desaf\u00edos de convertirse de la noche a la ma\u00f1ana en project manager, mantainer y vocero de un proyecto Open Source replicado en varios pa\u00edses y sobre todo de sobrevivir al burnout de esta situaci\u00f3n.\r\n\r\nLas tecnolog\u00edas usadas en este proyecto: Python, Django, PostGIS, OpenStreet Maps\r\n\r\nLista de temas a tratar - Como nace y el ambiente de crisis social en el cual se gesto el proyecto - Proyecto de fin de semana, idea simple ejecutada en el tiempo correcto - Aceptaci\u00f3n del publico - De 1 developer a ~30 en tiempo record - Crecimiento exponencial y open source - La comunidad de voluntarios - Apoyo de la Cruz Roja - Carga emocional de un proyecto social y el burnout - Impacto del proyecto y forks en otros pa\u00edses - ~6k familias ayudadas - Lecciones aprendidas", "conf_url": "http://us.pycon.org/2022/schedule/presentation/92/", "cancelled": false}, {"room": "151DEFG", "rooms": ["151DEFG"], "start": "2022-04-30T12:15:00-07:00", "end": "2022-04-30T12:45:00-07:00", "duration": 30, "kind": "charla", "section": "talks", "conf_key": 193, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Bailo con tu sombra: Patch, stub, mock.", "authors": ["Mar\u00eda Andrea Vignau"], "description": "Pretendo incentivar la creaci\u00f3n de tests, \r\n\r\n1) Su importancia, ayudando a identificar las razones por las que usar objetos simulados.\r\n\r\n2) como inyectar estos en el c\u00f3digo, usando patch y dependencia inversa.\r\n\r\n3) las ventajas y potencia de la librer\u00eda mock, magicmock ayudar a identificar los casos de uso de patch,  como emplear asserts respecto de las llamadas al mock y la posibilidad de usarlo como wrapper\r\n\r\n4) Cierro contando dos casos de bibliotecas muy populares para tesetar p\u00e1ginas web: vcr-pytest y moto.\r\nel uso de mocks y de stubs.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/19/", "cancelled": false}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-04-29T12:15:00-07:00", "end": "2022-04-29T12:45:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 138, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Why I reimplemented Trio in a game engine", "authors": ["Daniel Pope"], "description": "Trio is an asynchronous I/O framework. Unlike other async frameworks in Python, Trio offers structured concurrency: the structure of a program's concurrency tasks are reflected in its code.\r\n\r\nThe advantage of structured concurrency is that concurrent programs become easier to reason about, particularly if operations are cancelled.\r\n\r\nI reimplemented Trio-like structured concurrency in a game engine, Wasabi2D, and wrote some games with it. I found it to be an excellent fit that simplifies many game logic tasks.\r\n\r\nIn this talk I'll talk about concurrency in video games, present structured concurrency with examples found in game logic, and draw parallels between I/O based concurrency tasks and those found in video games.\r\n\r\nThe examples will also serve as a tutorial for writing games in Wasabi2D.\r\n\r\nFinally I will explore the differences between Wasabi2D and Trio's implementation of the structured concurrency concepts. By comparing the solutions we will see which elements of Trio are foundational to structured concurrency and which are specific choices for Trio's problem space.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/45/", "cancelled": false}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-04-30T12:15:00-07:00", "end": "2022-04-30T13:00:00-07:00", "duration": 45, "kind": "talk", "section": "talks", "conf_key": 191, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Flexible ML Experiment Tracking System for Python Coders with DVC and Streamlit", "authors": ["Antoine Toubhans"], "description": "There are so many tools to do data science today that it can be difficult to navigate. Many of them are AI platforms that \u201cdo everything by clicking on a UI\u201d and do not leverage pre-existing tools e.g., GIT for versioning, or good old python IDE instead of Jupyter Notebooks. On the other hand, ML engineering is not classical software engineering: \r\n\r\n- in addition to the code, the data should also be versioned;\r\n- in its essence, ML engineering is an exploratory work: one can not know if the model is going to work before testing it;\r\n- there is no clear way to guarantee the quality of the trained model: the data-scientist has to play with it to make it \u201ctalk\u201d.\r\n\r\nIn this talk, we will build a **fully customizable and complete system in python** to track Machine Learning experiments. For the purpose of this talk, we will train a neural network (Tensorflow) to classify images between cat and dog, though, the main focus is on the tooling and not the ML algorithm. We will use:\r\n\r\n- [DVC]([https://dvc.org/](https://dvc.org/)) (Data Version Control) to 1) version the data alongside the code with GIT 2) build training pipelines to orchestrate the python scripts 3) version experiments.\r\n- [Streamlit]([https://streamlit.io/](https://streamlit.io/)) to build data exploration apps to play with the trained models.\r\n\r\nBoth DVC and Streamlit are open-source libraries with python APIs.\r\nIn the second part of the talk, we will focus on various ways of combining DVC and Streamlit. For instance, we will see how to build a Streamlit app that allows selecting any trained model tracked with DVC (provided its GIT commit), loading it, and testing it on given input images.\r\n\r\nI will provide code samples and live demos throughout the talk.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/87/", "cancelled": false}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-04-29T12:15:00-07:00", "end": "2022-04-29T13:00:00-07:00", "duration": 45, "kind": "talk", "section": "talks", "conf_key": 137, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Building a binary extension", "authors": ["Henry Fredrick Schreiner III"], "description": "Support for binary extensions is an exceptional advantage of Python that is too\r\noften avoided for smaller packages with low developer resources. Binary\r\nextensions are used to achieve high performance for libraries like PyTorch,\r\nMyPy, and many thousands more. Binary extensions also allow access to a wealth\r\nof existing compiled libraries. Building your own binary extension is plagued\r\nby historically poor documentation, bad common practices, and many\r\nmisconceptions. But it is actually easy to write extensions today that work\r\nseamlessly on all common developer platforms using modern libraries and\r\ncontinuous integration.\r\n\r\nWe will take a look at packaging a binary extension from start to finish. This\r\nstarts with `pybind11` for C++ bindings, providing simple, header only builds\r\nand avoiding the need for a new language or pre-processor step. We will look at\r\n`scikit-build` for building, providing powerful CMake based builds with library\r\nsearch, multithreaded builds, and more. We will use PyPA's `build` to produce\r\nSDists. And we will use PyPA's `cibuildwheel` to produce binaries for all\r\ncommon platforms with minimal setup and simple CI code in GitHub Actions (but\r\ntrivially movable to any other CI system). We will talk about how to automate\r\ncommon tasks, like using GitHub's Dependabot to keep cibuildwheel up-to-date\r\nwhile also ensuring reproducible builds.\r\n\r\nAfter this talk, it is our hope that you will no longer shy away from using\r\ncompiled code in libraries, but will feel comfortable writing extensions to\r\naccelerate or advance your libraries functionality.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/57/", "cancelled": false}, {"room": "151DEFG", "rooms": ["151DEFG"], "start": "2022-04-29T12:15:00-07:00", "end": "2022-04-29T12:45:00-07:00", "duration": 30, "kind": "charla", "section": "talks", "conf_key": 141, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Reconocimiento de figuras con Visi\u00f3n Artificial", "authors": ["Alison Orellana Rios"], "description": "Se ver\u00e1 la gesti\u00f3n de la librer\u00eda OpenCV para el procesamiento de im\u00e1genes, con la que ser\u00e1 posible seguir los pasos para identificar figuras y diferentes elementos mediante algoritmos de reconocimiento de im\u00e1genes aplicados a la determinaci\u00f3n de formas.\r\nVer\u00e1s el uso de OpenCV ya que esta librer\u00eda te permite codificar r\u00e1pidamente, ya que cuenta con una documentaci\u00f3n oficial con muchos ejemplos, que ayudan a entender cada algoritmo en el procesamiento de im\u00e1genes, los pasos y su c\u00f3digo para ver su uso o aplicaci\u00f3n. Para ello, solo requiere una instalaci\u00f3n, (que es r\u00e1pida) y su posterior importaci\u00f3n para comenzar a ver sus funciones.\r\nLa visi\u00f3n artificial puede ayudar a mejorar el procesamiento de datos gr\u00e1ficos en diferentes \u00e1reas, tales como: industria, control de calidad, conteo de grandes cantidades de materiales, separaci\u00f3n r\u00e1pida de elementos, aseguramiento de la calidad, salud, determinaci\u00f3n de \u00e1reas de inter\u00e9s y m\u00e1s, lo que permite mejorar el trabajo. y tiempos de producci\u00f3n, adem\u00e1s de facilitar el tratamiento sin necesidad de interacci\u00f3n humana, lo que puede mejorar los resultados.\r\n\r\nEsquema\r\nLos tiempos estimados son:\r\nPara una charla de 45 minutos:\r\nIntroducci\u00f3n: 2 minutos.\r\nAcerca de m\u00ed: 3 minutos.\r\nPresentaci\u00f3n 15 minutos.\r\nDemostraci\u00f3n: 10 minutos.\r\nEjemplos: 5 minutos.\r\nConclusi\u00f3n: 5 minutos.\r\nPreguntas: 5 minutos.\r\n\r\nPara una charla de 30 minutos:\r\nIntroducci\u00f3n: 1 minuto.\r\nAcerca de m\u00ed: 1 minuto.\r\nPresentaci\u00f3n 10 minutos.\r\nDemo: 8 minutos.\r\nEjemplos: 3 minutos.\r\nConclusi\u00f3n: 2 minutos.\r\nPreguntas: 5 minutos.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/1/", "cancelled": false}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-04-30T12:15:00-07:00", "end": "2022-04-30T12:45:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 190, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Securing the Open Source Software Supply Chain", "authors": ["Dustin Ingram"], "description": "Supply Chain Security: so hot right now. With the recently increased focus on securing software systems, there has been a incredible explosion of tools, methodologies, standards, best practices, and more. Given the sheer quantity, it's hard to keep track and stay informed: how can you know what's right for you?\r\n\r\nThe same attributes that make open source software desirable to use also make it challenging to secure. When anyone can publish an open-source library, how can you decide what's safe to use? If anyone can contribute, how can you trust the maintainers? If source code and development is in public, how can we identify and respond to vulnerabilities when attackers will know about them as soon as we do?\r\n\r\nIn this talk, we'll explore new tools and best practices that you can use today as open-source software user to improve the security of your software supply chain and trust in the ecosystem. We'll show how each of these serves a different purpose, and protects you from a unique way in which your software supply chain could be vulnerable. Finally, we'll discuss upcoming and potential improvements to the entire open-source ecosystem.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/84/", "cancelled": false}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-04-30T12:15:00-07:00", "end": "2022-04-30T13:00:00-07:00", "duration": 45, "kind": "talk", "section": "talks", "conf_key": 189, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Software Development for Machine Learning in Python", "authors": ["Pablo Alcain"], "description": "Machine Learning and Data Science code has its own set of challenges and peculiarities. When we write code to be used by Data Scientists or Machine Learning Developers we have to keep in mind constantly that every abstraction we use has to a) be compatible with a fast and easy exploration playground; b) allow for sensible checkpoints and optimizations; c) implement in a declarative fashion repeated queries and functions; and d) provide an abstraction level over all of the production code so it can be tracked and monitored seamlessly.\r\n\r\nIn this talk we will provide general guidelines to approach this problem from a software engineering perspective, defining what should our entities be, how deep should our abstraction go and how to avoid some usual design pitfalls. We will apply all these guidelines to a specific and small end to end problem.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/2/", "cancelled": false}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-04-29T12:15:00-07:00", "end": "2022-04-29T12:45:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 140, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Harvest the power of the GPU for awesome special effects", "authors": ["Paul Vincent Craven"], "description": "This talk will show the impressive graphics you can create with OpenGL shaders. The Arcade library makes it easy to take many of the examples shown on the popular www.shadertoy.com website and run them under Python. We'll explain how shaders work, why they are so fast, and how to get started integrating shaders into your own Python programs.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/20/", "cancelled": false}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-04-29T12:15:00-07:00", "end": "2022-04-29T13:00:00-07:00", "duration": 45, "kind": "talk", "section": "talks", "conf_key": 139, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "How to Succeed with Python Across the Enterprise", "authors": ["Greg Compestine"], "description": "As a large, well-established company, Bloomberg focused on C++ as its primary language several decades ago. Python began as a scripting language for writing small utilities. An intern project several years ago showed that it was possible to integrate some C++ libraries with Python, making it possible to build domain-specific applications. An engineer with an affinity for Python got approval to form a small team to provide better support for the language. Engineers also formed small committees (or Guilds) to help promote Python across the organization by advocating for users, organizing meetups, actively monitoring messaging channels to help those with questions and problems, and writing lots and lots of documentation.\r\n\r\nToday, Python is used by more than 3,000 of the company's engineers. We actively support the Python Software Foundation and open source Python projects. Python is used to train new hires on the architectural paradigms used within the company. In less than a decade, we\u2019ve gone from taking our first steps with the language to being one of the leading contributors to its evolution.\r\n\r\nSometimes success can \"just happen.\" However, most often changing a cultural dynamic takes a lot of hard work. And it is work that can be very rewarding", "conf_url": "http://us.pycon.org/2022/schedule/presentation/79/", "cancelled": false}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-04-30T12:15:00-07:00", "end": "2022-04-30T12:45:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 192, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Making Data Classes Work for You", "authors": ["Bruce Eckel"], "description": "This will be a example-driven presentation. The first set of examples looks at\r\nan `int` which should be restricted to a value from one through ten.\r\n\r\nFirst I'll look at the problems in the traditional approach, passing an `int`\r\nto a function and checking to ensure it is within range.\r\n\r\nNext I'll encapsulate the `int` in a (regular) class `OneToTen`, which allows\r\nthe movement of the test into the constructor. Although this guarantees that\r\nobjects will be *created* correctly, such objects are mutable so they can be\r\nmodified to be invalid after creation.\r\n\r\nThe solution is to use `@dataclass` together with the `frozen=True` option, and\r\nadd a `__post_init__` function to check the validity of the object once it's\r\nbeen initialized. Because such an object is invariant, it cannot be later\r\nmodified into an invalid state. This ensures that the new type can *only* ever\r\nexist as a legitimate value.\r\n\r\nNext I'll use this technique to create a `Person` type that is composed of\r\n`FullName`, `BirthDate` and `EmailAddress` fields, each of which validates\r\nitself. Finally, I'll compose `BirthDate` using `Day`, `Month` and `Year`\r\nfields.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/39/", "cancelled": false}, {"room": "251E, 251F, 251D, 251C", "rooms": ["251E", "251F", "251D", "251C"], "start": "2022-04-28T12:30:00-07:00", "end": "2022-04-28T13:30:00-07:00", "duration": 60, "kind": "break", "section": "sponsor-workshops", "conf_key": 355, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Lunch"}, {"room": "250AB, 250DE, 250C, 250F, 251AB", "rooms": ["250AB", "250DE", "250C", "250F", "251AB"], "start": "2022-04-27T12:30:00-07:00", "end": "2022-04-27T13:30:00-07:00", "duration": 60, "kind": "break", "section": "tutorials", "conf_key": 250, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Lunch"}, {"room": "250AB, 250DE, 250C, 250F, 251AB", "rooms": ["250AB", "250DE", "250C", "250F", "251AB"], "start": "2022-04-28T12:30:00-07:00", "end": "2022-04-28T13:30:00-07:00", "duration": 60, "kind": "break", "section": "tutorials", "conf_key": 261, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Lunch"}, {"room": "151DEFG", "rooms": ["151DEFG"], "start": "2022-04-29T12:45:00-07:00", "end": "2022-04-29T13:45:00-07:00", "duration": 60, "kind": "break", "section": "talks", "conf_key": 146, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Lunch"}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-04-29T12:45:00-07:00", "end": "2022-04-29T13:30:00-07:00", "duration": 45, "kind": "break", "section": "talks", "conf_key": 143, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Lunch"}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-04-29T12:45:00-07:00", "end": "2022-04-29T13:30:00-07:00", "duration": 45, "kind": "break", "section": "talks", "conf_key": 145, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Lunch"}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-04-30T12:45:00-07:00", "end": "2022-04-30T13:30:00-07:00", "duration": 45, "kind": "break", "section": "talks", "conf_key": 195, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Lunch"}, {"room": "151DEFG", "rooms": ["151DEFG"], "start": "2022-04-30T12:45:00-07:00", "end": "2022-04-30T13:45:00-07:00", "duration": 60, "kind": "break", "section": "talks", "conf_key": 198, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Lunch"}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-04-30T12:45:00-07:00", "end": "2022-04-30T13:30:00-07:00", "duration": 45, "kind": "break", "section": "talks", "conf_key": 197, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Lunch"}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-05-01T13:00:00-07:00", "end": "2022-05-01T13:30:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 232, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Serialization: More than pickling", "authors": ["Joseph Lucas"], "description": "Have you ever needed to persist an object or instance? You probably researched serialization (converting an object to a byte-stream). The default for python is [pickle](https://docs.python.org/3/library/pickle.html), but there are other serialization options. In this talk, we'll explore some of those other options as well as their efficiency and security considerations.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/89/", "cancelled": false}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-05-01T13:00:00-07:00", "end": "2022-05-01T13:30:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 230, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Fast and reproducible tests, packaging, and deploys with Pantsbuild\u2019s hermetic environments", "authors": ["Christopher Neugebauer"], "description": "\u201cWorks on my machine\u201d: The cry of developers who can\u2019t reproduce a bug because their development environment is incompatible with their deployment environment. It\u2019s common because setting up clean environments is slow, tedious, and error-prone.\r\n\r\nMeanwhile, debugging errors introduced by incorrect environments is slow, tedious, and error-prone.\r\n\r\nEach step in your CI workflow theoretically only has inputs or outputs, but in reality, files can be left along the way by running tests or compiling extensions. These are side-effects, not inputs for subsequent steps in your workflow, let alone deployment, but if included they can affect correctness.\r\n\r\nYou can solve this using \u201chermetic environments\u201d: running every step of your workflow inside a fresh environment, so steps run truly independently of one another. You can do this manually with Docker, but it\u2019s difficult: you have to understand which inputs are necessary for a step, which newly generated files are meaningful outputs, and what should be discarded.\r\n\r\nPantsbuild uses hermetic builds automatically: it understands the inputs each step needs, what outputs it produces, and stores inputs and outputs inside a content-addressable database so it can rapidly build sandboxed environments for subsequent steps of your workflow.\r\n\r\nThe result is a build process where every step is run in isolation, with only the inputs each process truly needs, and only true outputs made available to each subsequent step. Pants\u2019 workflows are fast but verifiably correct \u2014 running against incorrect inputs is not a possible failure case.\r\n\r\nIn this talk, we\u2019ll explore how Pantsbuild enables truly hermetic builds. We\u2019ll look at other approaches to sandboxing and how they compare to Pants\u2019 approach, and how you can benefit from adding hermetic builds to your project.\r\n\r\nYou\u2019ll walk away being confident that \u201cworks on my machine\u201d means \u201cworks everywhere\u201d.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/17/", "cancelled": false}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-04-30T13:00:00-07:00", "end": "2022-04-30T13:45:00-07:00", "duration": 45, "kind": "break", "section": "talks", "conf_key": 194, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Lunch"}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-04-30T13:00:00-07:00", "end": "2022-04-30T13:45:00-07:00", "duration": 45, "kind": "break", "section": "talks", "conf_key": 196, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Lunch"}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-04-29T13:00:00-07:00", "end": "2022-04-29T13:45:00-07:00", "duration": 45, "kind": "break", "section": "talks", "conf_key": 144, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Lunch"}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-05-01T13:00:00-07:00", "end": "2022-05-01T13:30:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 233, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Getting Started with Statically Typed Programming in Python 3.10", "authors": ["Peacock"], "description": "Since 2015, it has been possible to write Python like a statically typed language with typing modules and other features introduced in Python 3.5.\r\n\r\nThis can significantly improve the development experience and review process.\r\n\r\nI have been using type hints in my work for several years and have been studying Haskell and TypeScirpt. I believe this session will be a stepping stone for \"type hints newbies.\"\r\n\r\n- What I will talk about in this talk:\r\n    - Advantages of using Typing\r\n        - Getting help from editors\r\n        - Facilitating code reviews\r\n    - How to get started with Typing\r\n        - Argument and return types for functions\r\n    - Using the standard Collections types\r\n        - The difference between tuple and other types\r\n        - Abstract and concrete types\r\n    - Generics, user-defined types\r\n    - Type Hinting Updates in Python 3.9 and 3.10\r\n        - (3.9) Type Hinting Generics In Standard Collections\r\n        - (3.10) Allow writing union types as X | Y\r\n        - (3.10) Parameter Specification Variables\r\n        - (3.10) Explicit Type Aliases\r\n        - (3.10) User-Defined Type Guards\r\n- What is not covered in this talk\r\n    - Basic Python 3 syntax\r\n    - (Not required): Experience developing in statically typed languages\r\n- Related contents:\r\n    - A talk at PyCon JP 2020 (JA): <https://pycon.jp/2020/en/timetable/?id=203955>\r\n    - <https://docs.python.org/3/library/typing.html>", "conf_url": "http://us.pycon.org/2022/schedule/presentation/23/", "cancelled": false}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-04-29T13:00:00-07:00", "end": "2022-04-29T13:45:00-07:00", "duration": 45, "kind": "break", "section": "talks", "conf_key": 142, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Lunch"}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-05-01T13:00:00-07:00", "end": "2022-05-01T13:30:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 231, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Who Said Wrangling Geospatial Data at Scale was Easy?", "authors": ["Brendan Collins"], "description": "If you have ever worked with Census Data, you may be recalling nightmares of hours spent staring at data and finding it impossible to download, store, or convert to a sensible format to begin your analysis. And Census data is not even unstructured data!\r\n\r\nGeospatial Data comes in various formats - GeoJSON, Parquet, Shapefiles, GeoTIFF, etc. But what are the most efficient ways to convert the data into formats that are easy to understand, work with, transfer, and ultimately analyze? Then throw in petabytes worth of data and you hit the challenge of wrangling geospatial data at scale. \r\n\r\nThis talk will walk through some of the best ways to handle geospatial data at scale, with a focus on:\r\n\r\n- The [xarray-spatial](https://xarray-spatial.org/) library for raster-based spatial analysis.\r\n- The [RTXpy](https://github.com/makepath/rtxpy) for GPU-powered spatial analysis.\r\n- [Microsoft Planetary Computer](https://planetarycomputer.microsoft.com/) examples of geospatial data processing.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/85/", "cancelled": false}, {"room": "251C", "rooms": ["251C"], "start": "2022-04-28T13:30:00-07:00", "end": "2022-04-28T14:30:00-07:00", "duration": 60, "kind": "sponsor-workshop", "section": "sponsor-workshops", "conf_key": 359, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Supercharge Your Python applications using GPU-accelerated Libraries (Sponsor: Nvidia)", "authors": ["Leo Fang"], "description": "Advances in AI Modeling, Data Science, Signal Processing, HPC, and even Quantum Computing demand parallelization and new programming models. Learn about NVIDIA\u2019s latest programming advancements which support core Python libraries and offer easier prototyping, graphics, and simulation functions, to help you get to production faster. Finally, we'll present cuQuantum, NVIDIA's quantum computing simulation SDK, and how it can be used to accelerate quantum information science.\r\n \r\nNVIDIA\u2019s enhancements to existing libraries help developers automatically leverage GPU-acceleration with little or no porting effort. We\u2019ll present a comparison of standard functions versus NVIDIA enhanced functions, which help supercharge your Python applications today!", "conf_url": "http://us.pycon.org/2022/schedule/presentation/175/", "cancelled": false}, {"room": "250C", "rooms": ["250C"], "start": "2022-04-27T13:30:00-07:00", "end": "2022-04-27T17:00:00-07:00", "duration": 210, "kind": "tutorial", "section": "tutorials", "conf_key": 252, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Python Types for Fun and Profit", "authors": ["Pradeep Kumar Srinivasan", "Jia Chen", "Shannon Zhu"], "description": "Many Python developers now use type annotations to catch and fix bugs early in the coding process. This tutorial will introduce you to type annotations in Python. We\u2019ll cover basic ideas about how types work in a dynamic language like Python, and where explicit annotations can provide value. We\u2019ll then explore features of the type system in more depth, and demonstrate how they can be used to precisely yet flexibly express a huge range of programming patterns.\r\n\r\nThroughout the tutorial, you will have the chance to get your hands dirty by learning how to add types to small code snippets as well as to an example GitHub project, and run a type checker to see errors as you code. You\u2019ll get to practice and play around with each concept as we discuss it, and walk away with concrete experience adding types to and catching bugs in real code.\r\n\r\nA laptop with Python installed is required along with internet access.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/100/", "cancelled": false}, {"room": "250AB", "rooms": ["250AB"], "start": "2022-04-27T13:30:00-07:00", "end": "2022-04-27T17:00:00-07:00", "duration": 210, "kind": "tutorial", "section": "tutorials", "conf_key": 251, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Python Metaprogramming: decorators, descriptors, metaclasses, and more", "authors": ["Trey Hunner"], "description": "Ever wondered how Python frameworks that seem kind of magical (like Django) actually work? That\u2019s the subject of this tutorial. If you can imagine a Python feature that doesn\u2019t exist, you might be able to invent it yourself using one of Python\u2019s metaprogramming features.\r\n\r\nIn this tutorial we\u2019ll learn about a few of Python\u2019s powerful metaprogramming features: decorators, descriptors, and metaclasses. These 3 features power many of Python\u2019s interesting internals (property, methods, and abstract base classes for example).\r\n\r\nBy the end, you'll understand how function and class decorators work, how the property decorator works under the hood, and what controls the creation of a class.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/30/", "cancelled": false}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-04-30T13:30:00-07:00", "end": "2022-04-30T14:15:00-07:00", "duration": 45, "kind": "talk", "section": "talks", "conf_key": 200, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Pyodide: A Python distribution for the browser", "authors": ["Roman Yurchak", "Hood Chatham"], "description": "Pyodide is a Python distribution for the browser and Node.js based on WebAssembly. It includes a port of CPython 3.9 to WebAssembly/Emscripten, and makes it possible to install and run Python packages in the browser. Pyodide comes with a robust Javascript \u27fa Python foreign function interface so that you can mix these two languages in your code with minimal friction.\r\n\r\nWe will walk through simple examples of how to run Python applications in the browser with Pyodide. We will also discuss the process of porting existing Python packages, including what makes a package suitable to port and what challenges are likely to arise. \r\n\r\n##### Some criteria that determine suitability of a project for porting\r\n\r\nPurely computational projects are simple to port to run in the browser. We are missing threading and multiprocessing, so you will need to be able to run single threaded. File system code mostly works unchanged. However, much of the UI and network access are very different inside the browser. Packages with a clean divide between doing computation and doing UI will be simpler to port, the UI parts may need to be rewritten or shimmed but the pure computation need not be.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/91/", "cancelled": false}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-04-29T13:30:00-07:00", "end": "2022-04-29T14:15:00-07:00", "duration": 45, "kind": "talk", "section": "talks", "conf_key": 150, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Sculpting Data for Machine Learning", "authors": ["Jigyasa Grover", "Rishabh Misra"], "description": "In the contemporary world of machine learning algorithms - \u201cdata is the new oil\u201d. For the state-of-the-art ML algorithms to work their magic it\u2019s important to lay a strong foundation with access to relevant data. Volumes of crude data are available on the web nowadays, and all we need are the skills to identify and extract meaningful datasets. This talk aims to present the power of the most fundamental aspect of Machine Learning - Dataset Curation, which often does not get its due limelight. It will also walk the audience through the process of constructing good quality datasets as done in formal settings with a simple hands-on Pythonic example. The goal is to institute the importance of data, especially in its worthy format, and the spell it casts on fabricating smart learning algorithms.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/13/", "cancelled": false}, {"room": "251AB", "rooms": ["251AB"], "start": "2022-04-27T13:30:00-07:00", "end": "2022-04-27T17:00:00-07:00", "duration": 210, "kind": "tutorial", "section": "tutorials", "conf_key": 255, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Goodbye, \"Hello, World.\" Hello, Functional FastAPI Web App!", "authors": ["Mario Munoz"], "description": "Building a web application with Python is super easy. With just a few lines of code, you can get a simple, working app running directly on your computer's browser.\r\n\r\nAwesome! But then what?\r\n\r\nThis tutorial focuses on that awkward transition from beginner to intermediate&mdash;when you want a project to be less of a _sketchpad_ and more of an __actual, useful tool__.\r\n\r\nWe will learn tactics on how to find and use resources when devising a plan for your web application, as well as hands-on learning for tackling common (and necessary) aspects of building your app, such as configuration, app structure, and database modeling.\r\n\r\nFor the training, you will be following along as we build the foundation of a fully-functional web application, and will leave with the ability to further refine it for real-world scenarios.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/27/", "cancelled": false}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-04-29T13:30:00-07:00", "end": "2022-04-29T14:15:00-07:00", "duration": 45, "kind": "talk", "section": "talks", "conf_key": 148, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Understanding attributes (Or: They're not nearly as boring as you think!)", "authors": ["Reuven M. Lerner"], "description": "Attributes in Python, which we use dozens of times each day, seem boring, obvious, and not worthy of attention. But it turns out that they're key to the Python language: Every time you say a.b in Python, that little dot is hiding a lot of work, from searching across multiple objects to silently rewriting things. And it turns out that what happens with attributes, while not always obvious to developers, determines a great deal of behavior in the Python language.\r\n\r\nIn this talk, I'll discuss what attributes are (and aren't), what Python does when you use a dot (.) in your code, and how you can take advantage of it. We'll talk about attribute lookup, about inheritance, and about methods vs. functions. We'll also look into properties, and how they allow us to have attributes that look like data but behave like setters and getters. Finally, we'll look at the descriptor protocol, which makes so much of Python's functionality possible, including the automatic insertion of \"self\" as the first argument in method calls.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/22/", "cancelled": false}, {"room": "251E", "rooms": ["251E"], "start": "2022-04-28T13:30:00-07:00", "end": "2022-04-28T14:30:00-07:00", "duration": 60, "kind": "sponsor-workshop", "section": "sponsor-workshops", "conf_key": 356, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "MySQL Automation with Python (Sponsor: Meta)", "authors": ["Marco Montalto M."], "description": "The audience will receive an overview of the design and techniques that made MySQL succeed at Meta.\r\nThis workshop will provide code snippet and examples meant to be followed along by the attendants.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/122/", "cancelled": false}, {"room": "251F", "rooms": ["251F"], "start": "2022-04-28T13:30:00-07:00", "end": "2022-04-28T14:30:00-07:00", "duration": 60, "kind": "sponsor-workshop", "section": "sponsor-workshops", "conf_key": 357, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Search, understand, and automate your Python code with Sourcegraph (Sponsor: Sourcegraph)", "authors": ["Max Wiederholt"], "description": "As codebases become more complex, Python developers are finding it harder to onboard new hires, respond to incidents and outages, monitor code health, promote code reuse, and fix security vulnerabilities. Google invested more than $100M to build an internal tool to solve these problems, but for your team, we've built Sourcegraph.com.\r\n\r\nJoin the Sourcegraph customer engineering team as we show you how code search, code intelligence, code insights, code monitoring, batch changes, and search notebooks can help your team ship faster and delight users.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/165/", "cancelled": false}, {"room": "251AB", "rooms": ["251AB"], "start": "2022-04-28T13:30:00-07:00", "end": "2022-04-28T17:00:00-07:00", "duration": 210, "kind": "tutorial", "section": "tutorials", "conf_key": 266, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Python under the hood: What so special about Python Objects?", "authors": ["Lucy Sheppard"], "description": "Become a stronger and more confident Python programmer by learning the fundamentals of Python objects. \r\n\r\nIf you've ever asked:\r\n\r\n- Why do I have to pass a `string` in the function `len(string)` as an argumnet, when if I want to convert the string to upper case I use `string.upper()`?\r\n- With a pandas dataframe why do I sometimes need brackets for example `df.describe()` as apposed to `df.shape`?\r\n- What do people really mean when they say \"everything in Python is an object?\"\r\n\r\nThen this tutorial is for you!\r\n\r\nBy the end of this tutorial, you will be able to build Python objects from scratch, leverage the magic of Python dunder methods (double underscore, like `__len__`) and extend existing classes to add functionality. These skills will expand your understanding of Python objects (and afterall, everything in Python is an object) so that you become more confident in writing Python programs. \r\n\r\n***Please note:*** this tutorial will not cover:\r\n- Advanced object oriented principles\r\n- Object oriented design patterns", "conf_url": "http://us.pycon.org/2022/schedule/presentation/74/", "cancelled": false}, {"room": "250F", "rooms": ["250F"], "start": "2022-04-28T13:30:00-07:00", "end": "2022-04-28T17:00:00-07:00", "duration": 210, "kind": "tutorial", "section": "tutorials", "conf_key": 265, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Awesome Modern Web Testing with Playwright", "authors": ["Pandy Knight"], "description": "Everybody gets frustrated when web apps are broken, but testing them thoroughly doesn't need to be a chore. [Playwright](https://playwright.dev/python/), a new open-source browser automation tool from Microsoft, makes testing web apps fun! Playwright outperforms other tools like Selenium WebDriver with a slew of nifty features like automatic waiting, mobile emulation, and network interception. Plus, with isolated browser contexts, Playwright tests can set up *much* faster than traditional Web UI tests.\r\n\r\nIn this tutorial, we will build a Python test automation project from the ground up. We will automate web search engine tests together step-by-step using Playwright for interactions and [pytest](https://docs.pytest.org/) for execution.\r\n\r\nSpecifically, we will cover:\r\n\r\n1. How to install and configure Playwright\r\n2. How to integrate Playwright with pytest, Python\u2019s leading test framework\r\n3. How to perform interactions through page objects\r\n4. How to conveniently run different browsers, capture videos, and run tests in parallel\r\n\r\nBy the end of this tutorial, you'll be empowered to test modern web apps with modern web test tools. You'll also have an example project to be the foundation for your future tests. You can use Playwright to test Django apps, Flask apps, or any other kinds of apps!", "conf_url": "http://us.pycon.org/2022/schedule/presentation/35/", "cancelled": false}, {"room": "250DE", "rooms": ["250DE"], "start": "2022-04-28T13:30:00-07:00", "end": "2022-04-28T17:00:00-07:00", "duration": 210, "kind": "tutorial", "section": "tutorials", "conf_key": 264, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Documenting your code: from docstrings to automated builds", "authors": ["Jacob Deppen"], "description": "## _If it isn't documented, it doesn't exist._\r\n\r\nDocumentation can make or break a project. Getting it right takes effort, but that effort doesn't have to be painful. In this tutorial, we will take a multi-stage approach to documentation, starting with the fundamentals, adding complexity and style, then finishing with automated publishing to the web. We will practice a maintainer-friendly workflow that smooths out some of the rough edges of creating documentation.\r\n\r\nIt is never too early or too late to pick up good documentation techniques and tools. As such, this tutorial will have elements that are relevant to brand new Pythonistas (What does a good docstring look like? What is a type hint?) as well as long-time practitioners (How can I make my docs easier to maintain? Where can I host docs? How can I test examples in my docstrings?).\r\n\r\nWe will cover code comments, docstrings, and type annotations as ways to add documentation within your code. Next, we will add a user interface and documentation prose layer with JupyterBook, Jupyter Notebooks, and Markdown. After that, we will use Sphinx to build API documentation. Finally, we will automate the build and publish steps with GitHub Actions and GitHub Pages.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/34/", "cancelled": false}, {"room": "250C", "rooms": ["250C"], "start": "2022-04-28T13:30:00-07:00", "end": "2022-04-28T17:00:00-07:00", "duration": 210, "kind": "tutorial", "section": "tutorials", "conf_key": 263, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Assessing and mitigating unfairness in AI systems", "authors": ["Manojit Nandi"], "description": "Fairness in AI systems is an interdisciplinary field of research and practice that aims to understand and address some of the negative impacts of AI systems on society, with an emphasis on improving the impacts of such systems on historically underserved and marginalized communities.\r\n\r\nIn this tutorial, we will walk through the process of assessing and mitigating fairness-related harms in the context of the U.S. health care system. Specifically, we will consider a scenario involving patient health risk modeling that has demonstrated racial disparities (Obermeyer et al., 2019). This tutorial will consist of a mix of instructional content and hands-on demonstrations using Jupyter notebooks. Participants will use the Fairlearn library to assess an ML model for performance disparities across different racial groups and mitigate those disparities using a variety of algorithmic techniques. Participants will also learn how to explore, document, and communicate fairness issues, drawing on resources such as datasheets for datasets and model cards. \r\n\r\nParticipants are expected to have intermediate Python skills and familiarity with Scikit-Learn. For maximal benefit, participants should have some experience training and evaluating supervised models in Python.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/102/", "cancelled": false}, {"room": "250AB", "rooms": ["250AB"], "start": "2022-04-28T13:30:00-07:00", "end": "2022-04-28T17:00:00-07:00", "duration": 210, "kind": "tutorial", "section": "tutorials", "conf_key": 262, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Introduction to Data Analysis Using Pandas", "authors": ["Stefanie Molin"], "description": "#### Section 1: Getting Started With Pandas\r\nWe will begin by introducing the Series, DataFrame, and Index classes, which are the basic building blocks of the pandas library, and showing how to work with them. By the end of this section, you will be able to create DataFrames and perform operations on them to inspect and filter the data.\r\n\r\n#### Section 2: Data Wrangling\r\nTo prepare our data for analysis, we need to perform data wrangling. In this section, we will learn how to clean and reformat data (e.g. renaming columns, fixing data type mismatches), restructure/reshape it, and enrich it (e.g. discretizing columns, calculating aggregations, combining data sources).\r\n\r\n#### Section 3: Data Visualization\r\nThe human brain excels at finding patterns in visual representations of the data; so in this section, we will learn how to visualize data using pandas along with the Matplotlib and Seaborn libraries for additional features. We will create a variety of visualizations that will help us better understand our data.\r\n\r\n#### Section 4: Hands-On Data Analysis Lab\r\nWe will practice all that you\u2019ve learned in a hands-on lab. This section features a set of analysis tasks that provide opportunities to apply the material from the previous sections.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/24/", "cancelled": false}, {"room": "251D", "rooms": ["251D"], "start": "2022-04-28T13:30:00-07:00", "end": "2022-04-28T14:30:00-07:00", "duration": 60, "kind": "sponsor-workshop", "section": "sponsor-workshops", "conf_key": 358, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "How we build software: a development and collaboration workflow to minimise context switching (Sponsor: New Relic)", "authors": ["Aaron Bassett"], "description": "We\u2019ll start the workshop with a brief overview of CodeStream and the services it integrates with. We\u2019ll also take this time to help any attendees who want to work along with us during the workshop through the initial CodeStream installation and set-up.\r\n\r\nThen we\u2019ll begin our typical development day!\r\n\r\nFirst up we will walk through the most common workflow; grabbing a ticket with a known solution, writing some code, and creating a PR. \r\n\r\nNext up we\u2019ll triage a bug report. We\u2019ll see how you can view production errors and explore their stack traces from within your editor, and how it can help you quickly identify the source of bugs. We\u2019ll also see how CodeStream\u2019s \"request feedback\" functionality, as well as its ability to share code directly to Slack and other messaging services, makes it easy to collaborate on complex code changes. \r\n\r\nOnce we've squashed the bug it's time to perform a code review! We'll use CodeStream to view an open PR and perform our review. We'll also look at how viewing changes within the context of an entire codebase gives a better understanding of the wider implications of each merge.\r\n\r\nFinally, we\u2019ll look at how CodeStream combines with other extensions to really supercharge your development process. We\u2019ll finish the workshop by inviting some of our New Relic colleagues to join us in a remote mob programming session, which we\u2019ll coordinate and launch without ever leaving our IDE.\r\n\r\nThroughout the workshop, attendees will be given the opportunity to practice with CodeStream by helping our host by pairing, reviewing their PRs, and providing code feedback within their editor.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/166/", "cancelled": false}, {"room": "250F", "rooms": ["250F"], "start": "2022-04-27T13:30:00-07:00", "end": "2022-04-27T17:00:00-07:00", "duration": 210, "kind": "tutorial", "section": "tutorials", "conf_key": 254, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Building your first Dashboard using Dash", "authors": ["Laura Gutierrez Funderburk"], "description": "### Tutorial breakdown \r\n\r\n##### Setting up\r\n\r\nWe will first activate a virtual environment, and install all required dependencies prior to the start. The facilitator will ensure that all participants have completed this step before moving to the next topic.\r\n\r\n##### Data exploration and visualization using Jupyter notebooks\r\n\r\nIn this section we will introduce the dataset and the problem statement. We will use the Pandas Python package to assess the presence of missing information, and get familiar with the content of the data via box plots, scatter plots and histograms using Plotly.\r\n\r\n##### Turning code into functions, and scripting\r\n\r\nOnce we are familiar with the data and generated a few sample visualizations, we will refactor our code into reusable functions that can be incorporated into a script. We will cover the anatomy of a Python script and interact with the script via the command line.\r\n\r\n##### Introduction to Dash and layouts\r\n\r\nIn this section, we will learn about the main components in a Dash app. We will introduce various dashboard designs (layouts). \r\n\r\n##### Implement dashboard and test locally\r\n\r\nIn this section we will implement code needed to generate and deploy a dashboard exploring the selected data locally. We will explore the pitfalls (potential sources of bugs, interpreting and fixing errors as they appear in the dashboard) and implement various layouts. \r\n\r\n##### Deploying online\r\n\r\nWe will learn about files needed to deploy a dashboard online: Procfiles, requirements.txt, .gitignore and their role in deployment. We will then deploy a test dashboard online using Heroku.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/172/", "cancelled": false}, {"room": "250DE", "rooms": ["250DE"], "start": "2022-04-27T13:30:00-07:00", "end": "2022-04-27T17:00:00-07:00", "duration": 210, "kind": "tutorial", "section": "tutorials", "conf_key": 253, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Knowledge graph data modelling with TerminusDB", "authors": ["Cheuk Ting Ho"], "description": "### For whom is your Workshop\r\n\r\nData scientists, engineers and researchers who have no prior experience in knowledge graph data modelling. In this workshop, we will start from the fundamentals -  learning how to think in terms of triples to describe relations of different data objects. If your work involves data analysis, data management, data collaboration or anything data-related, this is a workshop for you to have a brand new insight into how data should be represented and stored.\r\n\r\n### Short Format of your Workshop\r\n\r\nOverview-10 min, Lecture - 60 mins, Breaks- 20 minutes, Hands-on training - 80 mins, Closing - 10 mins\r\n\r\n### What Attendees will Learn\r\n\r\nBy the end of the workshop, you will be able to think like a knowledge graph expert and construct a proper schema to store your data in a knowledge graph format. You will acquire the skills that you need to build knowledge graphs in TerminusDB - an open-source graph database that enables revisional control and collaborations. \r\n\r\n### Course Benefits\r\n\r\nYou will have learnt a new skill set that may assist you in your project in data science or research. You will have a new tool that you can better model your data and collaborate with others. Also, you gain all the prerequisites to use WOQL - a query language for knowledge graphs and the TerminusDB Python client to manage, manipulate and visualize data in your knowledge graph.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/50/", "cancelled": false}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-04-30T13:30:00-07:00", "end": "2022-04-30T14:15:00-07:00", "duration": 45, "kind": "talk", "section": "talks", "conf_key": 202, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "GraphQL: The Devil\u2019s API", "authors": ["Ryan Kuhl"], "description": "While there are advantages to using GraphQL vs. traditional REST APIs such as descriptive queries, there are also a plethora of potential pitfalls, such as the n+1 query problem and idiosyncratic fickleness. We leverage data-loaders, async/await, dynamic query generation, and other performance optimizations in GraphQL to create a flexible, performant interface for our front-end services. Let\u2019s do GraphQL the right way!", "conf_url": "http://us.pycon.org/2022/schedule/presentation/114/", "cancelled": false}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-04-29T13:45:00-07:00", "end": "2022-04-29T14:15:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 149, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Bootstrapping Your Local Python Environment", "authors": ["Calvin Hendryx-Parker"], "description": "There are simple, yet crucial, reminders that can differentiate an expert developer from a hobbyist. In this talk and live demo, developers will learn: \r\n- the importance of abiding by the Zen of Python;\r\n- where (and how) to install Python on your machine; \r\n- three rules to follow when installing Python; \r\n- proper version management with pyenv;\r\n- which Python add-ons (e.g.: virtualenv, pipx, piptools, Docker) can be used to make environments both repeatable and simple.\r\n\r\nResources and Links \r\n- ActiveState: https://www.activestate.com/products/python/\r\n- asdf: https://github.com/danhper/asdf-python\r\n- Anaconda: https://www.anaconda.com/products/individual\r\n- Brew: https://brew.sh/\r\n- Chocolatey: https://chocolatey.org/\r\n- Docker\u2019s Python integration: https://hub.docker.com/_/python/\r\n- PDM: https://pypi.org/project/pdm/\r\n- pyenv setup: https://github.com/pyenv/pyenv#installation\r\n- pyenv setup for Windows: https://pyenv-win.github.io/pyenv-win/\r\n- pipenv versions: https://pipenv.pypa.io/en/latest/\r\n- piptools: https://github.com/jazzband/pip-tools/#readme\r\n- pipx setup: https://pypi.org/project/pipx/\r\n- pipx: https://pypa.github.io/pipx/\r\n- poetry: https://python-poetry.org/\r\n- pyproject.toml: https://www.python.org/dev/peps/pep-0621/\r\n- Python.org: https://python.org/\r\n- virtualenv: https://virtualenv.pypa.io/en/latest/\r\n- virtualenvwrapper: https://virtualenvwrapper.readthedocs.io/en/latest/\r\n- Zen of Python: https://www.python.org/dev/peps/pep-0020/", "conf_url": "http://us.pycon.org/2022/schedule/presentation/88/", "cancelled": false}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-04-29T13:45:00-07:00", "end": "2022-04-29T14:15:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 147, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Demystifying Python\u2019s Internals: Diving into CPython by implementing a pipe operator", "authors": ["Sebastiaan Zeeff"], "description": "Diving into the CPython source code can feel daunting. Whether you want to start contributing or just want to get a better understanding of Python by exploring its source code, it\u2019s often difficult to know where to start or what you\u2019re missing. \r\n\r\nIn my talk, I will show you around the CPython source code by implementing a new operator, a pipe operator. While doing so, I will discuss core parts of the internals, such as Python\u2019s grammar, its syntax trees, and the underlying logic that will perform the operation. By the end, you will have a good idea of the moving parts involved in core language features.\r\n\r\nI will also take you through the steps necessary to make it all work. I\u2019ll show you how I obtained a copy of the source code, regenerated the parser and token files, and how I compiled my modified version of CPython. I will also write and run tests to help me implement my changes. This should give you a mental framework that helps you while diving into more comprehensive resources, like the excellent [Python Developer\u2019s Guide](https://devguide.python.org/).\r\n\r\nMy talk is aimed at everyone who wants to explore CPython\u2019s internals. You don\u2019t have to be an expert in Python, although some affinity with Python helps with understanding the internals. I will also use C to implement some of the operator logic, but knowledge of C is by no means required. In short, if you\u2019re interested in diving into the CPython source code, this talk is for you.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/71/", "cancelled": false}, {"room": "151DEFG", "rooms": ["151DEFG"], "start": "2022-04-30T13:45:00-07:00", "end": "2022-04-30T14:15:00-07:00", "duration": 30, "kind": "charla", "section": "talks", "conf_key": 203, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Python + VPS Jupyter HUB/Notebook, aprender, ense\u00f1ar, investigar, trabajar de manera colaborativa, remota y presencial", "authors": ["Ariel Silvio Norberto Ramos", "Enzo Jesus Juarez Velazquez", "Liliana Hurtado", "Sofia Martin"], "description": "* Desde 2017 en el <b>Norte Argentino</b>, realizamos actividades con experiencias en tecnologia de impacto positivo para la sociedad, lo hacemos con las <b>Comunidades Python Norte y Python Argentina</b>. Ense\u00f1amos a los asistentes buenas practicas de uso en tecnologia y Software Open Source.<br>\r\n* Combinamos <b>3 componentes</b> para lograr un ambiente de tecnologia seguro y practico en estas <b>experiencias piloto educativas, de manera remota</b>, durante la pandemia COVID19.<br>\r\n* Los 3 componentes:<br>\r\n<b>Lenguaje de Programacion + Entorno de Trabajo + Infraestructura == Python + Project Jupyter + VPS (Jupyter HUB/Notebook).</b><br><br>\r\n* <b>VPS == Servidor Privado Virtual (Virtual Private Server)</b><br><br>\r\n* Tuvimos en cuenta los conocimientos tecnicos basicos de los interesados, entonces decidimos implementar/instalar en un <b>VPS</b> todos los componentes necesarios (<b>Python + Librerias + Plugins de Jupyter + Widgets</b>), asi ellos aprenden directamente.<br>\r\n* Iniciamos con programacion, luego con experiencias piloto programando Jupyters Notebooks para ense\u00f1ar Matematicas, Fisica, Robotica, armamos los notebooks con lo justo y necesario de programacion, ayudandonos de Widgets y Graficas.<br>\r\n* A medida que avanzamos, armamos Jupyter Notebooks en <b>materias de No Calculo.</b><br>\r\n* Logramos una buena practica y dinamica en la asistencia de aprendizaje en el uso del VPS y la ense\u00f1anza de conceptos de materias en las que logramos armar/programar Jupyter Notebooks.<br>\r\n* Los interesados fueron Docentes, Alumnos, Particulares.<br>\r\n* Se hizo de <b>manera remota</b>, tambien tuvimos experiencias en <b>forma presencial</b>.<br>\r\n* Generamos nuestros notebook como recursos.<br>\r\n* Tambien se pudo formar Jovenes Investigadores de la Universidad de Salta en disciplinas No relacionadas a Tecnologia.<br>\r\n* Repositorio del Proyecto: https://github.com/entrerrianas/pyconus2022", "conf_url": "http://us.pycon.org/2022/schedule/presentation/10/", "cancelled": false}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-05-01T13:45:00-07:00", "end": "2022-05-01T14:15:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 235, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Productionize Research Oriented Code By Python", "authors": ["Tetsuya Jesse Hirata"], "description": "Target audiences might be python engineers who is involved with R&D, data science, AI/ML projects, or data oriented projects.\r\n\r\n\u3010Introduction\u3011\r\n- Background\r\n- Definition of Research Oriented Code and Production Code\r\n- Differences between Research Oriented Code and Production Code\r\n\r\n\u3010Main Talk\u3011\r\n\r\nFour steps to productionize research oriented code\r\n1. Understand the code through code reading and code documentation\r\n2. Modularize the code into preparation code, pre/post-process code, calculation code based on the code documents\r\n3. Refactor the code with test code\r\n4. Make them products\r\n\r\n\u3010Summary\u3011\r\n- Summarize the four steps to productionize research oriented code\r\n- After making the code products, improve performance and monitor the behaviors of production code", "conf_url": "http://us.pycon.org/2022/schedule/presentation/77/", "cancelled": false}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-05-01T13:45:00-07:00", "end": "2022-05-01T14:15:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 237, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Speed Up Data Access with PyArrow (Apache Arrow) - Data is the new API", "authors": ["Deepak K Gupta"], "description": "Till now we\u2019re used to accessing data over API\u2019s and the API\u2019s used to make sure that we get the data in the desired format which unfortunately requires data to go through serialization / deserialization cycle before being returned by the API. \r\n<br/><br/>\r\nWhat if we can change or arrange the data in such a way where it neither needs an API nor any serialisation / deserialization to access and understand the data that too using multiple programming languages?\r\n<br/><br/>\r\nIf it sounds interesting then welcome to the world of Apache Arrow which defines a language independent columnar memory format which supports zero-copy reads for lightning-fast data access without serialization overhead. \r\n<br/><br/>\r\nThe python library of the same is called PyArrow and can be integrated with python specific libraries like pandas and numpy and can propagate the benefits to the same.\r\n<br/><br/>\r\nWelcome to this talk where you\u2019ll learn about the architecture, use cases and reasons for using Apache Arrow using PyArrow. I\u2019ll share how to as well as some of the interesting statistics of the difference it makes in our day to day access & analytics. \r\n<br/><br/>\r\nI\u2019ll also talk about Apache Flight, which is a high performance wire protocol focused on bulk transfer for analytics.  <br/><br/> This Session NOT a tutorial about PyArrow but a set of interesting improvements, facts and statistics which can help you to decide whether it makes sense to explore for the work you\u2019re doing.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/54/", "cancelled": false}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-04-30T13:45:00-07:00", "end": "2022-04-30T14:15:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 199, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Why Authorization is Hard", "authors": ["Sam Scott"], "description": "Every team implements authorization in their app to control which users can do what. You'd think by now we'd have a standard set of best practices for how to build it. And yet, we don't! Especially in the Python ecosystem. Why is authorization so hard? \r\n\r\nAuthorization is made up of three building blocks, each of which presents its own challenges:\r\n\r\n1. **Enforcing**\u00a0authorization is hard because it needs to happen in so many places. Controllers, database mappers, routers, and user interfaces all need to enforce authorization. As a result, there are limited off-the-shelf approaches that work in all cases.\r\n\r\n2.  **Decision architecture**\u00a0is hard because you want to separate authorization from the application, but a lot of authorization data is application data too. A monolith can check its own database when it needs to make a decision, but what happens if you want to consolidate authorization into a separate service? Many off-the-shelf solutions focus on the separation \u2013 coordinating it and keeping everything in sync is challenging too.\r\n\r\n3. **Modeling**\u00a0authorization is hard too.\u00a0It's easy to whip up the first use case \u2014 adding a\u00a0`roles`\u00a0table to your database works for a while. But it's hard to start simple and grow into your complexity as you need it. And it's hard to make something powerful that's simple to get started with. The options available typically err on one end of the spectrum or the other.\r\n\r\nIn this talk, you'll learn the approaches for how to solve each of these areas and the associated tradeoffs.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/11/", "cancelled": false}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-05-01T13:45:00-07:00", "end": "2022-05-01T14:15:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 234, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Managing the Test Data Nightmare", "authors": ["Pandy Knight"], "description": "Good data for testing can be a nightmare to manage. Sometimes, teams don\u2019t have much control over the data in their systems under test\u2014it\u2019s just dropped in, and it can change arbitrarily. Other times, teams need to build their own data sets, either before testing or during testing. Inaccurate data can leave test gaps. Incorrect or stale data can break tests. Large data can consume too much time. Ugh!\r\n\r\nIn this talk, we\u2019ll cover strategies for defeating many types of test data nightmares:\r\n\r\n* recognizing the difference between product data and test case data\r\n* deciding when to prepare data statically beforehand or dynamically during testing\r\n* using data to control how tests run or reflect product state\r\n* hard-coding values versus discovering data in the system\r\n* avoiding collisions on shared data\r\n\r\nThe strategies we cover can be applied to any project in any language. After this talk, you will wake up from the nightmare and handle test data cleanly and efficiently like a pro!", "conf_url": "http://us.pycon.org/2022/schedule/presentation/36/", "cancelled": false}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-04-30T13:45:00-07:00", "end": "2022-04-30T14:15:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 201, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "(Professionally) Coding with Others", "authors": ["William Morrell"], "description": "A mix of tools and practices to incorporate for facilitating collaboration between developers. As a nice side-effect, these also let past-you help future-you work on entirely solo projects. Topics include:\r\n- Documentation, specifically calling out a README and contributor guidelines, and site generators \u00e0 la Sphinx or MkDocs;\r\n- Version control / git, collecting changes in logical commits, writing good commit and pull request messages;\r\n- Auto-lint and formatting: `pre-commit`, `black`, `isort`, `flake8`;\r\n- Dependency management: `pyenv`, `pipenv`/`poetry`, Docker;", "conf_url": "http://us.pycon.org/2022/schedule/presentation/103/", "cancelled": false}, {"room": "151DEFG", "rooms": ["151DEFG"], "start": "2022-04-29T13:45:00-07:00", "end": "2022-04-29T14:15:00-07:00", "duration": 30, "kind": "charla", "section": "talks", "conf_key": 151, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Querido Diario: c\u00f3mo liberar datos oficiales de ciudades brasile\u00f1as con Python", "authors": ["Renne Rocha"], "description": "Los Diarios Oficiales son las principales formas de comunicaci\u00f3n entre la ciudadan\u00eda y el poder ejecutivo de una ciudad. En Brasil, por ley, todos los actos oficiales del gobierno deben publicarse en los Diarios. Sin embargo, no existe un est\u00e1ndar sobre como deben estar disponibles estas publicaciones. Entonces tenemos un escenario donde las 5570 ciudades brasile\u00f1as publican cada uno a su manera, generalmente utilizando formatos cerrados como PDF que dificultan la consulta y an\u00e1lisis de datos de forma automatizada.\r\n\r\nEl proyecto **[Querido Diario](https://queridodiario.ok.org.br/)** tiene como objetivo hacer m\u00e1s accesibles estos Diarios, facilitando la b\u00fasqueda y consulta de su contenido a trav\u00e9s de una [p\u00e1gina de b\u00fasqueda](https://github.com/okfn-brasil/querido-diario-frontend), una [API abierta](https://github.com/okfn-brasil/querido-diario-api) y en el futuro con herramientas de an\u00e1lisis de contenido.\r\n\r\nEn esta charla se presentar\u00e1 todo el proceso, desde la extracci\u00f3n de datos de las p\u00e1ginas de los municipios (mediante [data scraping](https://github.com/okfn-brasil/querido-diario) usando el framework Scrapy), el almacenamiento y procesamiento de archivos PDF para permitir la b\u00fasqueda en su contenido (usando OCR), a la API y la p\u00e1gina de b\u00fasqueda, donde cualquier persona tiene acceso centralizado a los Diarios de todos los municipios.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/67/", "cancelled": false}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-05-01T13:45:00-07:00", "end": "2022-05-01T14:15:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 236, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Shipping Python Extensions in Rust Two Million Times a Day", "authors": ["Paul Kehrer", "Alex Gaynor"], "description": "For as long as Python has been around, a strength has been the ecosystem of packages written not in Python, but in C -- whether that's PIL, or numpy, or simplejson, or one of the thousands of others. But why C? Why not some other language? In the last several years, Rust has emerged as a serious competitor to C. This talk will explore how we went about the process of using Rust in the pyca/cryptography package, the challenges we faced, the successes we found, and what this means for your projects.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/3/", "cancelled": false}, {"room": "151DEFG", "rooms": ["151DEFG"], "start": "2022-04-30T14:30:00-07:00", "end": "2022-04-30T15:00:00-07:00", "duration": 30, "kind": "charla", "section": "talks", "conf_key": 208, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Nixtla: Deep Learning para pron\u00f3stico de series de tiempo.", "authors": ["Federico Garza Ramirez", "Kin Gutierrez Olivares"], "description": "Descripci\u00f3n:\r\n\r\nEl pron\u00f3stico de series de tiempo tiene una amplia gama de aplicaciones: finanzas, retail, salud, IoT, etc. Recientemente modelos de deep learning como ESRNN o N-BEATS han demostrado tener performance estado del arte en estas tareas. Nixtlats es una librer\u00eda de python que hemos desarrollado para facilitar el uso de estos modelos estado del arte a data scientists y developers, para que puedan utilizarlos en ambientes productivos. Escrita en pytorch, su dise\u00f1o est\u00e1 enfocado en la usabilidad y reproducibilidad de los experimentos. Para ello, nixtlats cuenta con diversos m\u00f3dulos:\r\n\r\nData: contiene datasets de diversas competencias de series de tiempo.\r\nModels: incluye modelos estado del arte.\r\nEvaluation: posee diversas funciones de p\u00e9rdida y m\u00e9tricas de evaluaci\u00f3n.\r\n\r\nObjetivo:\r\n\r\n- Introducir a les asistentes a los retos del pron\u00f3stico de series de tiempo con deep learning.\r\n- Aplicaciones comerciales del pron\u00f3stico de series de tiempo.\r\n- Describir nixtlats, sus componentes y las mejores pr\u00e1cticas para entrenamiento y despliegue de modelos estado del arte en productivo.\r\n- Reproducci\u00f3n de resultados estado del arte usando nixtlats del modelo ganador de la competencia M4 de series de tiempo (ESRNN).\r\n\r\nRepositorio del proyecto: https://github.com/Nixtla/neuralforecast.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/170/", "cancelled": false}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-04-30T14:30:00-07:00", "end": "2022-04-30T15:00:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 206, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Making Python better one error message at a time", "authors": ["Pablo Galindo Salgado"], "description": "Python 3.10 has been recently released and among many exciting new features, one of the biggest improvements is the inclusion of a whole new set of changes focused on improving the error messages across the interpreter and the general user experience when dealing with error messages. The new error messages have been one of the most welcomed features from very different sets of users ranging from Python teachers and educators, first-time learners, industry professionals and data scientists.\r\n\r\nIn this talk, we will cover:\r\n\r\n* What are the new improvements featured in Python 3.10.\r\n* Exciting new changes and improvements that will feature in Python 3.11.\r\n* How these improvements are useful to different sets of users from people learning Python to experienced programmers.\r\n* How the new PEG parser has unlocked adding new custom syntax errors.\r\n* How these improvements were implemented and what challenges the CPython core team faced to get them working reliably.\r\n* How users can contribute to adding new error messages: what is the workflow, how the errors are reviewed by the core team and where to find resources and help.\r\n\r\nNo matter who you are and what you do with Python, there is an improvement that will probably make you smile.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/69/", "cancelled": false}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-04-30T14:30:00-07:00", "end": "2022-04-30T15:00:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 204, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Bad actors vs our community: detecting software supply chain attacks on Python ecosystem", "authors": ["Ajinkya Rajput", "Ashish Bijlani"], "description": "Rapid prototyping or development is one of the most favourite features of the Python software ecosystem. This is possible due to efficient reuse of software libraries enabled by package managers such as PyPi. While PyPI maintainers have streamlined the process of publishing and distributing a package for developers, bad actors evidently exploit this infrastructure to propagate malware. For example, simply by publishing a malicious package with a name similar to a popular package, bad actors can exploit carelessness or inexperience of developers and elevate a simple installation typo to a remote code execution attack. \r\n\r\nIn this talk, we will present technical details of our large-scale vetting system that analyzes millions of published software package versions for malware and other \u201crisky\u201d attributes, such as sudo access, source inconsistencies, abandonware, and unsafe installation hooks. We will share our experience while building this system, and present examples of new malware we have detected as case studies. Finally, we will introduce our free tool OSSIE, a Python PyPi package, for developers to audit project dependencies and notify them when dependencies turn malicious. The presented tool is extremely user friendly and is an attempt towards furthering usable security.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/115/", "cancelled": false}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-04-30T14:30:00-07:00", "end": "2022-04-30T15:00:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 205, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Leveraging a custom CPython data model for high-performance microprocessor design", "authors": ["Richard Taggart"], "description": "Developing insights for problems encountered while building a high-performance microprocessor requires analyzing large amounts of data generated from a complicated design process. This is a Big Data problem. The four main challenges include: managing design components, reporting, linking data across time, and providing a reliable and scalable platform. The Design Data (DD) data model is a technological breakthrough to address the above challenges for integrated circuit design, analysis, and debug. The data model efficiently stores read-only design graph topology (e.g., inter-connected logic gates and wires), and derived analysis data (e.g., estimated signal delay and power usage) in a compressed binary file. DD is a custom domain-specific read-only binary data model with an extensive query API, which is implemented using C++, CPython, and Python method bindings.\r\n \r\nThe C++ data model implementation enables efficient graph traversal, custom interactive \"offline\" analysis, and design graph visualization. Every data file may be tagged and stored using the compressible binary format, which facilitates comparing different versions across a multi-year project. They can compare past and current data sets to identify and assess specific design trends and failure modes. This data analysis workflow powered by Python improves the quality of a chip design by allowing engineers to focus on the hard problems.\r\n \r\nThis talk will share our experience of incorporating modern Free Open-Source Software technologies into a complicated ecosystem of commercial toolchains and workflows for Electronic Design Automation (EDA). After this talk, I hope you will be inspired to experiment with integrating C or C++ and CPython bindings into your application workflow. I also hope this may help you think about different ways you might be able to integrate various methods of Data Science into your application domain.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/56/", "cancelled": false}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-04-30T14:30:00-07:00", "end": "2022-04-30T15:00:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 207, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Observability-driven development", "authors": ["Bianca Rosa"], "description": "You're all happy developing your application but when it comes the time to send it to production and have the first customers testing, you might realize that whenever a bug is found it is just too hard to understand what is going on in a production environment - you often don't have access to the user data, the user account and struggles to reproduce the error and support your customer properly. \r\n\r\nThe story is too familiar and probably happened to a lot of of us. \r\n\r\nIn this talk, we will walk through techniques and things to consider when writing an application that is going to be supported in a production environment with an eye for observability by having searchable, consistent, and rich log messages.\r\n\r\nAt first, the problem will be presented to the audience with a use-case scenario where a developer has no way of knowing what happened with a particular customer in a production environment if an API request fails.\r\nOpening the code for this request, we will add together the log messages that would've made it possible for the development to debug this problem properly - and then, talk through strategies to keep in mind during the early development of the code.\r\nWe will also walk through log levels and how to use them properly, making sure the log messages are clean and understandable, how to take take advantage of log's extra fields to have metadata about the messages that we are writing, and the best way to make log messages easily searchable.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/75/", "cancelled": false}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-04-29T14:30:00-07:00", "end": "2022-04-29T15:00:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 152, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Distributed Web Scraping in Python", "authors": ["Josh Weissbock"], "description": "Web scraping is easy to do in Python, but it quickly becomes tedious when routinely running large batch scraping jobs. This talk looks at how to build a distributed web scraper to reduce batch scraping job times and improve durability of your code as well as lessons learned & stories along the way.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/48/", "cancelled": false}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-04-29T14:30:00-07:00", "end": "2022-04-29T15:00:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 153, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "What to Do When the Bug Is in Someone Else's Code", "authors": ["Paul Ganssle"], "description": "It's generally better to use libraries than to write your own code, but what happens when you run into an issue that is correctly solved by modifying the *library code* rather than your own code? What if you need to deploy a fix *today*, but you can't count on the upstream library applying the required fixes and getting a new release through your deployment system before your deadline? This presentation will cover various stop-gap strategies (of varying desirability) for dealing with this situation, including:\r\n\r\n- Working around the bug with wrapper functions\r\n- Monkey patching the offending methods or functions\r\n- Vendoring a patched version of the library into your application\r\n- Maintaining a forked version in your local package manager", "conf_url": "http://us.pycon.org/2022/schedule/presentation/86/", "cancelled": false}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-04-29T14:30:00-07:00", "end": "2022-04-29T15:00:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 155, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Comparing the Different Ways to Scale Python and Pandas Code", "authors": ["Kevin Kho", "Han Wang"], "description": "Fugue is an open-source unified interface for Pandas, Spark, and Dask that aims to let data practitioners define their compute workflows in a scale-agnostic manner. By decoupling logic and execution, users can code in a language that they are familiar with (Python, Pandas or SQL), and then choose an execution engine to run it on (Pandas, Spark or Dask). In this talk, we cover the `transform()` function, which lets a user execute a single function in a distributed setting. This simple interface can be incrementally adopted and allows data practitioners to be productive with distributed computing very quickly.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/95/", "cancelled": false}, {"room": "151DEFG", "rooms": ["151DEFG"], "start": "2022-04-29T14:30:00-07:00", "end": "2022-04-29T15:00:00-07:00", "duration": 30, "kind": "charla", "section": "talks", "conf_key": 156, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "An\u00e1lisis exploratorio de datos abiertos para el fortalecimiento de democracias", "authors": ["Ana Cec\u00edlia Vieira"], "description": "Ven a aprender acerca del an\u00e1lisis exploratorio de datos abiertos con las librer\u00edas m\u00e1s populares de Python para la ciencia de datos. Adem\u00e1s, conocer el nivel de transparencia de datos en Am\u00e9rica Latina. \r\nLa charla va dirigida a las personas que tienen inter\u00e9s en el tema \u201cciencia de datos\u201d e iniciaron sus estudios, sin embargo a\u00fan no comprenden c\u00f3mo usarlos. Ser\u00e1n usadas las librer\u00edas Pandas y Matplotlib en el an\u00e1lisis, que ser\u00e1 hecho en el Google Collab.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/97/", "cancelled": false}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-04-29T14:30:00-07:00", "end": "2022-04-29T15:00:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 154, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Open Source on Easy Mode", "authors": ["John Reese"], "description": "Open source is the lifeblood of the community, and we all stand on the shoulders of giants. But the responsibility, time commitment, and processes that come with maintaining projects on PyPI can be overwhelming, even for the best of us. With this talk, we'll see how the right tools and automation can cut out the overhead from running open source projects, and let you focus on the fun parts!\r\n\r\nWe'll cover a wide range of topics, from packaging, metadata, and dependencies, to code quality, testing, and CI/CD, and finish with documentation, helping new developers, and reviewing contributions from the community. We'll look at high level concepts, modern best practices, and free tools available and how they make it easier than ever for new contributors to get started, while giving you confidence that their changes are safe and ready for production.\r\n\r\nRather than just pointing to cookie cutter templates, we'll talk about the \"why\" behind these best practices and how they fit into common developer workflows. We'll also include links to references and popular developer tools, as well as a companion site with slides and a list of everything mentioned in the talk.\r\n\r\nDevelopers of all experience levels are welcome. Whether you're new to packaging and need guidance for your first release, or a seasoned package maintainer looking to simplify your workflow, this talk is for you!", "conf_url": "http://us.pycon.org/2022/schedule/presentation/104/", "cancelled": false}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-05-01T14:30:00-07:00", "end": "2022-05-01T15:00:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 238, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Open-Source, Python-Based Tools For Data Privacy", "authors": ["Cillian Kieran"], "description": "In this talk, I make the case that the developer community has an opportunity to profoundly improve data privacy by shifting privacy upstream into the SDLC, where it belongs. I will share resources and lessons learned from my team's development of open-source, Python-based devtools for data privacy. Analogous to physical infrastructure, our digital infrastructure needs to be designed with trustworthiness at the forefront. As developers, we have often been left out of important design decisions about how technical systems actually process personal data. Typically, privacy risk is addressed reactively, and developers have to manually fulfill users' privacy requests across disparate data infrastructure. This reactive, burdensome approach to privacy pits trustworthiness against innovation. To build trustworthy systems at scale, we need devtools for proactive privacy, and the tools must fit within existing developer workflows.\r\n\r\nI will walk through the existing points of friction for developers today, the power of privacy embedded into the SDLC, and the tight bond between open-source and privacy. My team and I have learned that we can improve privacy at scale when the tools for privacy fit into developers' existing workflows and the infrastructure they use every day, including Snowflake warehouses, mongoDB databases, Redis session stores, and more. I will demonstrate what proactive privacy can look like for developers and data engineers: automatic flags for privacy risk in the CI pipeline, and streamlined privacy request fulfillment by traversing distributed data systems for custom data operations\u2014such as deleting personal data while upholding referential integrity across databases.\r\n\r\nOpen-source and privacy go hand-in-hand in offering developers and end-users digital infrastructure that they can trust. To tackle a problem as complex as modern privacy, the solution requires all of us to build shared, transparent, and community-informed privacy standards for technology worldwide.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/59/", "cancelled": false}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-05-01T14:30:00-07:00", "end": "2022-05-01T15:00:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 241, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "How to Make Your Python Jupyter Notebook Standalone and Reproducible to allow others to replicate your experiments", "authors": ["Francesco Murdaca", "Maya Costantini"], "description": "Even though many developers (including data scientists) focus on their core problems when working on their experiments, one basic aspect can make these projects not reusable. We are not considering anything machine learning-related yet.\r\nOne of the first steps during the development of a project is the selection of libraries or dependencies. When someone runs pip install <package-name>, they might not be aware that along with the library that is going to be installed, so-called direct dependency, many other dependencies will be installed on your machine, so-called transitive dependencies. Any change in one of those dependencies can break your experiment. It\u2019s fundamental to have a way to state all the dependencies used, including the operating system, python interpreter, and hardware used to run a certain experiment.\r\nIn this session, the speakers will present an open source JupyterLab extension for Python dependency management developed by the Thoth team. They will learn what resolution engine can be used (e.g. Pipenv, Thoth), the difference between these resolution engines. Moreover they will learn what to do in different scenarios emulating typical Jupyter notebook experiences to learn how to use the new extension. \r\nBy the end of this session, attendees will learn the importance of reproducibility, how to  use the Thoth Jupyterlab extension for Python projects and the benefits of a cloud resolution engine with respect to other existing ones. They will be able to run a tutorial using only a GitHub account and a browser as it will be run in a completely open cloud environment.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/130/", "cancelled": false}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-05-01T14:30:00-07:00", "end": "2022-05-01T15:00:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 239, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Will it Blend? Writing A Custom Constraint Solver for Blender with Cython", "authors": ["Maryanne Wachter"], "description": "Have you ever wanted to prove Python naysayers wrong in that you *can* have both fast and approachable code with Python? With a few adjustments to standard Python code, you can harness the power of Cython to vastly improve Python performance, while maintaining the look and feel of a traditional Python package. In this talk, common pitfalls in developing with Cython will be discussed in the context of how Cython was used to bring powerful and fast optimization algorithms to a custom geometric form finding add-on for Blender.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/109/", "cancelled": false}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-05-01T14:30:00-07:00", "end": "2022-05-01T15:00:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 240, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Building a Python Code Completer", "authors": ["Meredydd Luff"], "description": "Code completion is almost magic, and it makes writing code feel so good. But how does it actually work? I built a code completion engine from scratch - and in this talk, I'll tell you its secrets. \r\n\r\nWe'll learn how Python parses and compiles code, what an AST is, and how we can use this knowledge to work out what a programmer might type next. And to prove it's not that complicated, I'll build a little code completer, live on stage, in about five minutes.\r\n\r\nI'll also talk about how code completion is like games programming, how we should broaden our thinking about \"types\" in Python, and how we can use information that *isn't* in your code to make coding even more satisfying.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/129/", "cancelled": false}, {"room": "251E, 251F, 251D, 251C", "rooms": ["251E", "251F", "251D", "251C"], "start": "2022-04-28T14:30:00-07:00", "end": "2022-04-28T17:00:00-07:00", "duration": 150, "kind": "blank", "section": "sponsor-workshops", "conf_key": 360, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "&nbsp;"}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-04-29T15:15:00-07:00", "end": "2022-04-29T15:45:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 157, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Dock Your Jupyter Notebook", "authors": ["Nir Barazida"], "description": "To perfect your **Jupyter Notebook** craft, you'd want to make your work reproducible and shareable outside your local machine. In this talk, we will learn how to use **Docker** to build an isolated and pre-defined environment suited for ML project that runs smoothly on a remote machine.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/15/", "cancelled": false}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-04-30T15:15:00-07:00", "end": "2022-04-30T15:45:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 210, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Write Docs Devs Love: Ten Tips To Level Up Your Tech Writing", "authors": ["Mason Egger"], "description": "Think of that feeling you get when you follow an online tutorial or documentation and the code works on the first run. Now think of all the hours spent wasted following broken, outdated, or incomplete documentation. From our favorite tutorials to bad product docs we all consume technical writing. Tutorials, blog posts, and product docs help developers learn new things, build projects, and debug issues. But what makes one tutorial better than another? In this talk I'll discuss how you can write the documentation that developers love and I\u2019ll share 10 tips and tricks to improve your technical writing.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/173/", "cancelled": false}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-04-29T15:15:00-07:00", "end": "2022-04-29T15:45:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 158, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "When to refactor your code into generators and how", "authors": ["Jan-Hein B\u00fchrman"], "description": "Have you ever found yourself coding variations of a loop construct where fragments of the loop code were exactly the same between the variations? Or, in an attempt to factor out these common parts, you ended up with a loop construct containing a lot of conditional code for varying start, stop, or selection criteria?\r\n\r\nYou might have felt that the end result just didn't look right. Because of the duplicated parts in your code, you noticed that the code didn't conform to the DRY (_Don't Repeat Yourself_) principle. Or, after an attempt to combine the variations into a single loop, with consequently a lot of conditional code, your inner voice told you that the resulting code had become too complex and difficult to maintain.\r\n\r\nThis talk will show you a way out of this situation. It demonstrates how you can create a **generator function** that implements only the common parts of your loop construct. Subsequently you will learn how you can combine this generator function with distinct hand-crafted functions or building blocks from the standard library `itertools` module or the `more-itertools` package.\r\n\r\nAs an example, imagine you'd need to implement some varying functionality based on the Fibonacci sequence. This talk shows you how it would look like before and after you've refactored it into a **pipeline of generators**.\r\n\r\nAfter having seen this pattern, you will recognize more quickly when this kind of refactoring helps you to create more maintainable and more Pythonic code.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/121/", "cancelled": false}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-04-30T15:15:00-07:00", "end": "2022-04-30T15:45:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 211, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Learn Python Like a 12-Year Old", "authors": ["Kelly Schuster - Paredes", "Sean Tibor"], "description": "Along the way to adulthood, we often lose that sense of wonder, enjoyment, and playfulness that we had as kids in our favorite school subjects. As adults, we can become better learners ourselves when we examine how kids learn coding with Python. In this session, we\u2019ll talk about making thinking and coding visible, to the brain science behind how we learn new things, to the importance of playfulness in learning. We will share a variety of helpful tips to improve your learning whether you are new to Python or an experienced coder.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/42/", "cancelled": false}, {"room": "151DEFG", "rooms": ["151DEFG"], "start": "2022-04-29T15:15:00-07:00", "end": "2022-04-29T15:45:00-07:00", "duration": 30, "kind": "charla", "section": "talks", "conf_key": 161, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Programacion Reactiva: Navegando en el mundo de la asincronia con RxPy", "authors": ["Andres Pineda"], "description": "A medida que nuestras aplicaciones van creciendo y estas se van poniendo m\u00e1s complejas, el performance pudiera verse impactado por las diferentes tareas que se ejecutan, algunas inclusive llegando a bloquear el \u201cthread\u201d donde estas est\u00e1n corriendo.\r\n\r\nLa programaci\u00f3n reactiva (ReactiveX) nos ayuda con esto, permiti\u00e9ndonos escribir de una forma f\u00e1cil instrucciones que se ejecutar\u00e1n de forma as\u00edncrona gracias a los operadores que pueden ser usados para crear, filtrar y unificar los diferentes flujos de datos de nuestro sistema, todo esto, manteniendo nuestro c\u00f3digo flexible, legible y f\u00e1cil de mantener.\r\n\r\nEsta presentaci\u00f3n nos muestra que es la programaci\u00f3n reactiva, en qu\u00e9 consiste y que nos permite hacer para nuestros programas Python puedan implementarla y as\u00ed disfrutar de sus beneficios.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/111/", "cancelled": false}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-04-30T15:15:00-07:00", "end": "2022-04-30T15:45:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 209, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Python for Threat Intelligence", "authors": ["Aaron Stephens"], "description": "# Description\r\n\r\nFor many of us, writing code isn't our job - but we do it anyways. We're not software engineers, and balancing the two isn't easy, but we make do. Because with just a few lines of Python, we can automate the boring, tedious work and enable ourselves to tackle the really hard problems. This is especially true in threat intelligence, where analysts help defenders make informed decisions to protect themselves and their businesses against the security incidents happening every single day.\r\n\r\nHow do major hacks happen, who's responsible, and why? Come and learn about the world of threat intelligence, why we ask these questions, how we answer them, and - most importantly - the Python tools we've built along the way. See how we approach development on a team without any developers, balance process with productivity and enable success at scale. This one is for all the scripts out there helping us do our jobs, and for all the part-time developers who write them. Enjoy!", "conf_url": "http://us.pycon.org/2022/schedule/presentation/43/", "cancelled": false}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-04-29T15:15:00-07:00", "end": "2022-04-29T15:45:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 159, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Handling Timezones in Python", "authors": ["Benjamin \"Zags\" Zagorsky"], "description": "Does your code use datetimes?  There's a chance it has bugs that show up every night after 7pm!\r\n\r\nTimezones and daylight savings time are problems that plague most systems.  Even if your system is designed for use in a singe timezone, you still need to be aware of timezones, both figuratively and literally to avoid bugs (Python datetimes that are correctly instantiated are referred to as \"timezone aware\").\r\n\r\nThis talk will cover:\r\n* Common mistakes with dates and datetimes in Python\r\n* How to use timezone aware datetimes in Python\r\n* Recipes for common datetime use cases\r\n* Recipes for Django", "conf_url": "http://us.pycon.org/2022/schedule/presentation/90/", "cancelled": false}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-04-30T15:15:00-07:00", "end": "2022-04-30T15:45:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 212, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "How we standardized editable installs - PEP-660 vs. PEP-662", "authors": ["Bernat Gabor"], "description": "A Python Enhancement Proposal (PEP) is the method through which the Python community debates and adopts new features to the language. The same mechanism is used to standardize interfaces and methods used by the Python Packaging Ecosystem. The main difference is that while language PEPs are written mostly by core developers, packaging PEPs are written by members of the Python Packaging Authority (PyPA). How we build Python packages was standardized in 2016 through PEP-517 and PEP-518. Editable installs, while widely used and well known through the `-e` flag in pip, proved to be controversial, so it got left out of those proposals. It has taken another five years to reach a consensus, and I'm happy to say that -- through PEP-660 -- we now have a way for all build back-ends to support editable installs. Join me in this talk, where I'll tell a tale explaining how having competing PEPs and exhausting discussions -- while tiresome -- led to a better solution. Plus, you'll also understand the different options we considered and the solution we developed in the end.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/55/", "cancelled": false}, {"room": "151DEFG", "rooms": ["151DEFG"], "start": "2022-04-30T15:15:00-07:00", "end": "2022-04-30T15:45:00-07:00", "duration": 30, "kind": "charla", "section": "talks", "conf_key": 213, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "La gu\u00eda sin p\u00e1nico sobre seguridad de c\u00f3digo abierto para la arquitectura de aprendizaje autom\u00e1tico", "authors": ["Sal Kimmich"], "description": "Cualquiera que cree aplicaciones de aprendizaje autom\u00e1tico alojadas en la nube se beneficiar\u00eda de las pr\u00e1cticas de ciberseguridad que pueden aprender en esta charla.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/171/", "cancelled": false}, {"room": "255ABC, 255DEF, 355ABC, 355DEF", "rooms": ["255ABC", "255DEF", "355ABC", "355DEF"], "start": "2022-05-01T15:15:00-07:00", "end": "2022-05-01T15:55:00-07:00", "duration": 40, "kind": "plenary", "section": "talks", "conf_key": 242, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Keynote - <a href=\"https://us.pycon.org/2022/about/keynote-speakers/#naomi\">Naomi Ceder</a>"}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-04-29T15:15:00-07:00", "end": "2022-04-29T15:45:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 160, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "If an asyncio.Task fails in the woods and nobody is around to see it, does it still page you at 3am.", "authors": ["Jason Fried"], "description": "Its 3am you just got called about some asyncio production code that is failing either cryptically or silently.  You discover that its using some terrible pattern and say to yourself \"how did this ever work?\".  Come find out about some bad asyncio usage patterns and how to combat them in your projects.  We will talk about useful patterns for bootstrapping and tear down, and give you the tools you need to improve the code you maintain.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/8/", "cancelled": false}, {"room": "255ABC, 255DEF, 355ABC, 355DEF, 151DEFG", "rooms": ["255ABC", "255DEF", "355ABC", "355DEF", "151DEFG"], "start": "2022-04-29T15:45:00-07:00", "end": "2022-04-29T16:15:00-07:00", "duration": 30, "kind": "break", "section": "talks", "conf_key": 162, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Break"}, {"room": "255ABC, 255DEF, 355ABC, 355DEF, 151DEFG", "rooms": ["255ABC", "255DEF", "355ABC", "355DEF", "151DEFG"], "start": "2022-04-30T15:45:00-07:00", "end": "2022-04-30T16:15:00-07:00", "duration": 30, "kind": "break", "section": "talks", "conf_key": 214, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Break"}, {"room": "255ABC, 255DEF, 355ABC, 355DEF", "rooms": ["255ABC", "255DEF", "355ABC", "355DEF"], "start": "2022-05-01T16:00:00-07:00", "end": "2022-05-01T16:30:00-07:00", "duration": 30, "kind": "plenary", "section": "talks", "conf_key": 243, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Python Software Foundation Update"}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-04-29T16:15:00-07:00", "end": "2022-04-29T16:45:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 163, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Effective Protobuf: Everything You Wanted To Know, But Never Dared To Ask", "authors": ["Liran Haimovitch"], "description": "A talk of 40 minutes covering the following topics:\r\n1. Introduction to serialization and its place in software engineering\r\n2. Static typed vs dynamic typed serialization\r\n3. Textual vs binary serialization: pros and cons\r\n4. Popular serialization frameworks\r\n5. Why Protobuf\r\n6. Quick intro to Protobuf (just enough to get by)\r\n7. Protobuf performance challenges and tradeoffs\r\n8. Async synchronization: pros and cons\r\n9. Field encoding: under the hood and what we learn\r\n10. Managing the cost of abstractions\r\n11. Data deduplication and compression\r\n12. Field reuse: the whys and hows\r\n13. gRPC: pros and cons\r\n14. Protobuf over websocket or HTTP\r\n15. Thank you", "conf_url": "http://us.pycon.org/2022/schedule/presentation/51/", "cancelled": false}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-04-30T16:15:00-07:00", "end": "2022-04-30T16:45:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 218, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Why Should Async Get All The Love?: Advanced Control Flow With Threads", "authors": ["A. Jesse Jiryu Davis"], "description": "asyncio introduced many of us to futures, chaining, fan-out and fan-in, cancellation tokens, and other advanced control flow concepts. But Python threads were doing this stuff before it was cool! Come see Python threading techniques inspired by asyncio, Go, and Node.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/44/", "cancelled": false}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-04-29T16:15:00-07:00", "end": "2022-04-29T16:45:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 165, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Implementing shared functionality using Middleware", "authors": ["Amit Saha"], "description": "In this talk, I will provide an introduction to the topic of writing middleware for your web applications. Middleware is often simply brought in to an application's code base, without perhaps a thorough understanding of how they work. This talk will shed light on how middleware components work in popular Python web frameworks - Flask, Django and FastAPI. \r\n\r\nArmed with that understanding, you will learn how to write your own middleware as well as use standard community contributed middleware to implement vital functionality in your applications.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/6/", "cancelled": false}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-04-30T16:15:00-07:00", "end": "2022-04-30T16:45:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 217, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Writing Functional Code in Python", "authors": ["Vic Kumar"], "description": "### Intro (2 min)\r\n\r\nIn this talk, we'll define exactly what functional programming is and how it helps us.  We'll explore the main concepts from functional programming and see how we can apply them to our Python code going over some concrete examples.\r\n\r\n### What is Referential Transparency (3 min)\r\n\r\nWe'll look at how we can prove if a function is pure or not, and what the implications are of writing our code more explicitly.  We'll look at an existing snippet of code that uses mutation and how we can transform such a function into one that is referentially transparent.  \r\n\r\n### Handling Emptiness: The Option Monad (7 min)\r\n\r\nWe'll go over a concrete example of using branching logic and nested `if`s to check for emptiness.  Again, we'll transform this code by using the Option monad and make our code more readable and robust.\r\n\r\n### Handling Exceptions:  The Try Monad (7 min)\r\n\r\nWe'll take a look at dealing with exceptions using the `try..except` syntax.  We'll change this to using the Try monad and see how our code reads from left-to-right and how we can make the side-effects of our functions more explicit to the caller.\r\n\r\n### Handling Asynchronous Calls: The Future Monad (8 min)\r\n\r\nWe'll take an example which uses threads and processes and change it into an example that uses the Future monad.  Along the way, we'll see how we can more explicitly handle asynchronous behaviors and their effects.\r\n\r\n### Conclusions and Takeaways (3 min)\r\n\r\nWe'll conclude by looking at the pros and cons of functional programming and where we can use it in our Python code.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/80/", "cancelled": false}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-04-30T16:15:00-07:00", "end": "2022-04-30T16:45:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 215, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "How to change Python (while it's running)", "authors": ["Olivier Breuleux"], "description": "Wouldn't it be nice to be able to do live development in a running Python instance, using your favorite editor and structuring your code however you would like, seeing your changes immediately reflected in the middle of the program's execution? Thanks to Python's incredible runtime flexibility, this can be done. In this talk, we will explore how changes to source code files can be integrated into running programs, covering as many edge cases as possible and explaining the intrinsic limitations of the approach. We will also demonstrate Jurigged, a flexible and extensible working implementation of this system.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/26/", "cancelled": false}, {"room": "151DEFG", "rooms": ["151DEFG"], "start": "2022-04-30T16:15:00-07:00", "end": "2022-04-30T16:45:00-07:00", "duration": 30, "kind": "charla", "section": "talks", "conf_key": 219, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "De cero a 200 OK en 30 minutos: Desarrollo Web con Django, Heroku, TravisCI y GitHub", "authors": ["Luis Conejo"], "description": "## Motivaci\u00f3n\r\n---\r\n\r\nEn \u00e9poca reciente, tuve la oportunidad de desarrollar un proyecto de *freelance* con una empresa editorial cuyo objetivo es migrar su herramienta de generaci\u00f3n de libros de ser un script de Python, lanzado desde un terminal, a convertirse en una herramienta gr\u00e1fica basada en la web.\r\n\r\nEn el proceso, tuve la oportunidad de aplicar las herramientas para la creaci\u00f3n de una p\u00e1gina web completa que normalmente utilizo en mi trabajo como instructor de Python en una universidad.\r\n\r\n## Objetivo\r\n---\r\n\r\nEn esta charla, quiero compartir una versi\u00f3n simplificada de dicha experiencia, mostrando la creaci\u00f3n de un proyecto nuevo en Django, la implementaci\u00f3n de acceso controlado y de un modelo de base de datos en SQL, para finalmente desplegar nuestro proyecto en Heroku y habilitar Integraci\u00f3n Continua utilizando GitHub y TravisCI.\r\n\r\nEl proceso se desarrolla en su totalidad en el nivel de coste cero de cada servicio, mostrando que es posible crear un prototipo completo de esta manera.\r\n\r\n## Audiencia meta\r\n---\r\n\r\n- Desarrolladores interesados en hacer freelance en Python sin incurrir en altos costos para la creaci\u00f3n de un prototipo inicial para clientes potenciales.\r\n- Instructores interesados en ense\u00f1ar desarrollo web 100% en Python.\r\n- Desarrolladores que quieren aprender desarrollo web en Python.\r\n\r\nEstructura de la charla\r\n---\r\n\r\n- C\u00f3mo termin\u00e9 de desarrollador *freelance*? (3 minutos).\r\n- Las herramientas que utilizaremos (3 minutos).\r\n- Creando nuestro proyecto en Django (22 minutos).\r\n    - Configuraci\u00f3n inicial.\r\n    - Modelo de base de datos.\r\n    - La interfaz de administrador en Django.\r\n    - Plantillas HTML.\r\n    - Publicaci\u00f3n de nuestra p\u00e1gina en Heroku.\r\n    - Integraci\u00f3n Continua con GitHub y TravisCI.\r\n- Qu\u00e9 m\u00e1s podemos hacer? (2 minutos)", "conf_url": "http://us.pycon.org/2022/schedule/presentation/21/", "cancelled": false}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-04-30T16:15:00-07:00", "end": "2022-04-30T16:45:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 216, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Localize your open source documentation: a Kubernetes case study", "authors": ["Zachary Sarah Corleissen"], "description": "This talk covers how [Kubernetes docs][1] were able to scale from zero to eleven localizations within six months in 2018. It covers what docs maintainers learned, mistakes to avoid, and how you can start localizing your own open source project.\r\n\r\nGreat documentation drives [developer adoption][2]...but documentation is only great if it's accessible. One piece of accessibility is localization: the ability for developers to access information in their native or primary language.\r\n\r\nThis talk covers the specifics of scalable localization that other projects can adopt, based on the Kubernetes documentation model: tooling, workflows, standards for minimum viable documentation, and community conduct. \r\n\r\nThis talk also covers some avoidable mistakes to save your maintainers time and stress, as well as the ongoing greater-than-additive benefits that localization can bring. \r\n\r\nThis talk concludes with specific recommendations for other projects to start their own localizations.\r\n\r\n[1]: https://kubernetes.io/docs/\r\n[2]: https://www.heavybit.com/library/video/how-great-documentation-drives-developer-adoption/", "conf_url": "http://us.pycon.org/2022/schedule/presentation/9/", "cancelled": false}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-04-29T16:15:00-07:00", "end": "2022-04-29T16:45:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 166, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Improving App Performance with Snapshots", "authors": ["Juan Gonzalez"], "description": "Improving your app's performance is a complicated but essential task to handle growth.\r\n\r\nOften, the bottleneck for your system is your database.\r\n\r\nWhile there are many strategies on scaling your database infrastructure, there isn't a clear strategy for solving your performance issues by improving your Python code.\r\n\r\nCome to this talk to learn how a recently open-sourced library named \"snapshot-queries\" can help you write Python code that helps you scale without spending more!", "conf_url": "http://us.pycon.org/2022/schedule/presentation/60/", "cancelled": false}, {"room": "151DEFG", "rooms": ["151DEFG"], "start": "2022-04-29T16:15:00-07:00", "end": "2022-04-29T16:45:00-07:00", "duration": 30, "kind": "charla", "section": "talks", "conf_key": 167, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "\u00c1lgebra de mapas en Python", "authors": ["Nicole Franco Leon"], "description": "\u00c1lgebra de mapas es un lenguaje de expresiones aritm\u00e9ticas que utilizan relaciones (operadores y\r\nfunciones) y variables que representan datos y valores espaciales para realizar an\u00e1lisis geogr\u00e1ficos mediante el modulo ArcPy. El \u00e1lgebra de mapas b\u00e1sicamente implica hacer matem\u00e1ticas con mapas. \r\n\r\nLa idea de utilizar datos geogr\u00e1ficos existentes para generar nuevos o simplemente extraer de ellos resultados cuantitativos, es una pr\u00e1ctica com\u00fan desde el mismo momento en que aparece la cartograf\u00eda moderna.\r\n\r\nEn esta charla tendremos una introducci\u00f3n al modulo de ArcPy, su configuraci\u00f3n en ArcGis, pasando luego por una mirada hol\u00edstica de todo el modulo desde sus operadores, operaciones, y funciones algebraicas, la creaci\u00f3n de expresiones complejas para el procesamiento de datos geoespaciales en determinada temporalidad, la preparaci\u00f3n de las capas y concluiremos con la generaci\u00f3n de mapas usando Python.\r\n\r\nSi te gustan la geograf\u00eda, la matem\u00e1tica y Python, esta charla es para ti.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/73/", "cancelled": false}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-04-29T16:15:00-07:00", "end": "2022-04-29T16:45:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 164, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "VigNET: An intelligent camera app that assists you in understanding your surroundings", "authors": ["Padmaja Bhagwat", "Manisha R"], "description": "**What if you can understand your surroundings with just a click of a picture?**\r\n\r\nThe speakers have built an intelligent camera app that assists people with visual impairment in understanding their surroundings. This application takes camera input in the form of an image and attempts to answer questions related to the image. Simply put, it's a Visual Question Answering (VQA) app.\r\n \r\nThe deep learning based application is built using a transformer based model called Vision Language Transformer (ViLT) which is both computationally fast and efficient, thus providing answers to users\u2019 questions within a fraction of seconds. The application is integrated with speech-to-text and text-to-speech capabilities to enhance accessibility. \r\n\r\nThis talk would mainly cover the following: \r\n* What is the Vision Language Transformer (ViLT) model?\r\n* Advantages of ViLT over traditional vision language pre-trained models\r\n* Best practices around modularizing the application into different services\r\n* Steps to deploy this deep learning based application on cloud (GCP)\r\n* How in-built python libraries helped in implementing and deploying such complex models (viz. ViLT) easily\r\n\r\nThe entire code is open-sourced and the talk will provide a walkthrough of the steps to build your own visual question answering application.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/83/", "cancelled": false}, {"room": "255ABC, 255DEF, 355ABC, 355DEF", "rooms": ["255ABC", "255DEF", "355ABC", "355DEF"], "start": "2022-05-01T16:30:00-07:00", "end": "2022-05-01T16:50:00-07:00", "duration": 20, "kind": "plenary", "section": "talks", "conf_key": 244, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Closing<br><small>Mariatta</small>"}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-04-29T17:00:00-07:00", "end": "2022-04-29T17:30:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 168, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Enhancing Code Collaboration with Conflict-Free Replicated Data Types", "authors": ["Dr. Rebecca Bilbro", "Patrick Deziel"], "description": "Jupyter Notebook may be one of the most controversial open source projects released in the last ten years! Love them or hate them, they\u2019ve become a mainstay of data science and machine learning, and a significant part of the Python ecosystem. While Jupyter can simplify experimentation, rapid prototyping, documentation, and visualization, it often impedes version control, code review, and test coverage. Dev teams must accept the good with the bad\u2026 but what if they didn\u2019t have to? In this talk we introduce conflict-free replicated data types (CRDT), a special object that supports strong consistency, and which can be used to enhance Jupyter notebooks for a truly collaborative experience.\r\n\r\nFirst proposed by [Shapiro et al in 2011](https://pages.lip6.fr/Marc.Shapiro/papers/RR-7687.pdf) conflict-free replicated data types (CRDTs) evolved out of the Distributed Systems community for replication of data across a network of replicas. CRDTs are objects that come with a special guarantee \u2014 namely, that two different copies of that object can be strongly consistent, meaning they can be kept in sync. While CRDTs have enjoyed a good amount of attention from academia over the last years, primarily amongst database and cloud researchers, they have not led to many practical applications for everyday developers. However, [recent work by Kleppmann et al](https://www.inkandswitch.com/peritext/) shows CRDTs can be used for real-time rich-text collaboration \u2014 creating a \u201cGoogle doc\u201d-type experience with any document in a networked file system.\r\n\r\nIn this talk, we\u2019ll present the basics of CRDTs and demonstrate how they work with examples written in Python. Next, we\u2019ll explain how CRDTs can enable more collaborative Jupyter notebooks, opening up features such as synchronous insertions, diffs, and auto-merges, even with multiple simultaneous contributors!", "conf_url": "http://us.pycon.org/2022/schedule/presentation/63/", "cancelled": false}, {"room": "250AB, 250DE, 250C, 250F, 251AB", "rooms": ["250AB", "250DE", "250C", "250F", "251AB"], "start": "2022-04-28T17:00:00-07:00", "end": "2022-04-28T18:00:00-07:00", "duration": 60, "kind": "plenary", "section": "tutorials", "conf_key": 267, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Opening Reception"}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-04-29T17:00:00-07:00", "end": "2022-04-29T17:30:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 169, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Better Air, Better Health: Creating an indoor air quality monitoring and predictive system.", "authors": ["Maria Jose Molina Contreras"], "description": "In the last couple of years, most people have been moved to a full working from home work-style, which made us realize benefits we were not aware of, but sadly some little inconveniences as well, like health related issues.\r\n\r\nIn this talk, we will explore how to build a functional system to track the air quality, collect our own data using different sensors and implement a predictive approach to avoid future health problems.\r\nWe are going to dive into the different setups to interact with air quality sensors using Python on **microcontrollers and embedded systems**, collecting your own data to evaluate different factors like **humidity, temperature, CO2, particles,** but that\u2019s not all, also we will go into the implementation of a **predictive machine learning (ML) model** to predict Indoor **CO2 levels** and alerting us based on predictions before critical levels.\r\n\r\nThe main idea of this talk is to show with a practical example how Python is a great option to build an indoor air quality monitoring complemented with a predictive ML model for Indoor CO2, while having fun building and monitoring their home.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/70/", "cancelled": false}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-04-30T17:00:00-07:00", "end": "2022-04-30T17:30:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 222, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Writing performant code for modern Python interpreters", "authors": ["Kevin Modzelewski"], "description": "This talk will go into the latest efforts to speed up the Python language, and in particular how some things will be sped up much more than others. You may have heard best practices for Python performance before, but there are some new guidelines now, some old ones are no longer as important, and some are no longer true at all. Come to hear how the Python language is being optimized, and what you can do to best take advantage of these optimizations.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/37/", "cancelled": false}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-04-29T17:00:00-07:00", "end": "2022-04-29T17:30:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 171, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "How We Migrated 3.8 Million Lines of Python 2 Without Interrupting Development", "authors": ["Benjamin Bariteau"], "description": "Migrating from python 2 to python 3 is not very easy, but it can be exacerbated by needing to port a large codebase modified frequently by many different developers. Our codebase was nearly 4 million lines of code modified dozens of times a day by hundreds of total developers. It is also business critical, containing a large portion of our most important code and data. We used several tools, techniques, and patterns to achieve the migration without disrupting  day-to-day development and keeping regressions a minimum. In this talk, we\u2019ll detail our migration steps, our usage of pre-commit hooks to reduce regressions to fixes, our usage of a reverse proxy to allow granular, low risk rollout for a webapp, and our migration of pickle to rollforward safe json for caching.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/81/", "cancelled": false}, {"room": "151DEFG", "rooms": ["151DEFG"], "start": "2022-04-30T17:00:00-07:00", "end": "2022-04-30T17:30:00-07:00", "duration": 30, "kind": "charla", "section": "talks", "conf_key": 224, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Estrategias para trabajar con datos a medida que estos crecen.", "authors": ["Marco Carranza"], "description": "Hoy en d\u00eda, los datos son cada vez m\u00e1s grandes, por lo que es casi imposible procesarlos en m\u00e1quinas de escritorio. Para resolver este problema, han surgido muchas tecnolog\u00edas para procesar todos datos utilizando m\u00faltiples cl\u00fasteres de computadoras. El desaf\u00edo es construir soluciones sobre estas tecnolog\u00edas, requiriendo dise\u00f1ar complejos pipelines de datos combinando m\u00faltiples tecnolog\u00edas.\r\n\r\nSin embargo, en algunos casos, no disponemos suficiente tiempo o recursos para aprender a usar y configurar una infraestructura completa para ejecutar un par de experimentos. Quiz\u00e1s seas un investigador con recursos muy limitados o una startup con un calendario apretado para lanzar un producto al mercado.\r\n\r\nEl objetivo de esta charla es presentar diversas estrategias para procesar la data a medida que esta crece y puede ser procesada con los recursos limitados de una sola m\u00e1quina o con el uso de clusters, utilizando tecnolog\u00edas como Pandas, Pyspark, Vaex y Modin.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/72/", "cancelled": false}, {"room": "255DEF", "rooms": ["255DEF"], "start": "2022-04-30T17:00:00-07:00", "end": "2022-04-30T17:30:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 221, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "The Model Review: improving transparency, reproducibility, & knowledge sharing using MLflow", "authors": ["Jes Ford"], "description": "Code Review is an integral part of software development, but many teams don\u2019t have similar processes in place for the development and deployment of Machine Learning (ML) models. I will motivate the decision to create a Model Review process, starting from the principles of transparency, reproducibility, and knowledge sharing. MLflow is a useful Python package to help simplify and automate much of the tracking necessary to create detailed records of machine learning experiments. Much of this talk will be spent introducing this tool, and demonstrating the core MLflow Tracking functionality. I\u2019ll discuss how my team is currently running a Model Review process for any ML models that we push to production, and how we use MLflow to streamline this work and learn from each other.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/68/", "cancelled": false}, {"room": "355DEF", "rooms": ["355DEF"], "start": "2022-04-30T17:00:00-07:00", "end": "2022-04-30T17:30:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 223, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Write faster Python! Common performance anti-patterns", "authors": ["Anthony Shaw"], "description": "This talk will show small, specific examples of Python code that can be refactored to be faster without compromising on readability. At the start of the talk, I'll explain how to set up a profiler to measure application performance and how to track improvements and regressions.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/49/", "cancelled": false}, {"room": "355ABC", "rooms": ["355ABC"], "start": "2022-04-29T17:00:00-07:00", "end": "2022-04-29T17:30:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 170, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "In-house to open source: Stitching the past to the future with Python", "authors": ["Nandita Viswanath", "Sagar Aryal"], "description": "Ever had to deal with old code that is filled with thousands of repetitive code blocks and too many if statements? It gets harder when the original authors aren't around to explain what they were thinking. These pain points related to legacy software are often the motivation for many organizations to adopt robust open source solutions. Open source software is becoming more and more the standard in any tech stack. Knowing how to navigate the world of open source software and how to best implement it is a skill that is becoming ever more important for any software engineer. Python is one of the most popular languages when it comes to open source. In this talk, we hope to outline why this is and how you can take advantage of it in your software migrations.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/99/", "cancelled": false}, {"room": "151DEFG", "rooms": ["151DEFG"], "start": "2022-04-29T17:00:00-07:00", "end": "2022-04-29T17:30:00-07:00", "duration": 30, "kind": "charla", "section": "talks", "conf_key": 172, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Match/case para principiantes", "authors": ["Ariel Ortiz"], "description": "Python ha carecido durante mucho tiempo de un mecanismo de control de flujo condicional presente en muchos otros lenguajes de programaci\u00f3n, algo que permita tomar un valor y compararlo de manera directa y sencilla contra varias opciones. El lenguaje C y sus derivados cuentan con la instrucci\u00f3n `switch/case`. Otros lenguajes tienen un soporte m\u00e1s sofisticado de _pattern matching_. Las formas tradicionales para lograr un comportamiento equivalente en Python no eran del todo elegantes. Una opci\u00f3n era escribir una cadena de expresiones `if/elif/else`. Una segunda opci\u00f3n era utilizar un diccionario con llaves asociadas a funciones. En general esto funciona adecuadamente, pero puede ser complicado de construir, entender y mantener.\r\n\r\nDespu\u00e9s de varias propuestas fallidas para agregar una sintaxis tipo `switch/case` a Python, se acept\u00f3 finalmente una propuesta reciente para Python 3.10:  _structural pattern matching_ (b\u00fasquedas de coincidencias de patrones estructurales). Este esquema de _pattern matching_ no solo hace posible realizar coincidencias simples de estilos de `switch/case`, sino que tambi\u00e9n admite una gama m\u00e1s amplia de casos de uso. En esta charla se mostrar\u00e1 c\u00f3mo aprovechar en nuestros programas esta nueva facilidad.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/52/", "cancelled": false}, {"room": "255ABC", "rooms": ["255ABC"], "start": "2022-04-30T17:00:00-07:00", "end": "2022-04-30T17:30:00-07:00", "duration": 30, "kind": "talk", "section": "talks", "conf_key": 220, "license": "CC BY", "tags": "", "released": true, "contact": ["redacted"], "name": "Intro to Introspection", "authors": ["Jeremiah Paige"], "description": "Python has immensely powerful capabilities to find information about objects and running code; even code you did not directly create. Through examples I will show you where that information is kept, how to retrieve it, and how to make sense of it.", "conf_url": "http://us.pycon.org/2022/schedule/presentation/5/", "cancelled": false}, {"room": "251E, 251F, 251D, 251C", "rooms": ["251E", "251F", "251D", "251C"], "start": "2022-04-28T17:00:00-07:00", "end": "2022-04-28T18:00:00-07:00", "duration": 60, "kind": "plenary", "section": "sponsor-workshops", "conf_key": 361, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Opening Reception"}, {"room": "255ABC, 255DEF, 355ABC, 355DEF, 151DEFG", "rooms": ["255ABC", "255DEF", "355ABC", "355DEF", "151DEFG"], "start": "2022-04-30T17:45:00-07:00", "end": "2022-04-30T18:45:00-07:00", "duration": 60, "kind": "plenary", "section": "talks", "conf_key": 225, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Lightning Talks"}, {"room": "255ABC, 255DEF, 355ABC, 355DEF, 151DEFG", "rooms": ["255ABC", "255DEF", "355ABC", "355DEF", "151DEFG"], "start": "2022-04-29T17:45:00-07:00", "end": "2022-04-29T18:50:00-07:00", "duration": 65, "kind": "plenary", "section": "talks", "conf_key": 173, "license": "CC BY", "tags": "", "released": true, "contact": [], "name": "Lightning Talks"}]}